<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Attention, learn to solve routing problems</title>
    <url>/Attention,%20learn%20to%20solve%20routing%20problems/</url>
    <content><![CDATA[<h1 id="旅行商问题（TSP）"><a href="#旅行商问题（TSP）" class="headerlink" title="旅行商问题（TSP）"></a>旅行商问题（TSP）</h1><p>给定一系列城市和每对城市之间的距离，求解访问每一座城市一次并回到起始城市的最短回路。</p>
<p>这是一个 NP 完全问题，当数据规模比较大的时候，目前几乎不可能找到精确解。</p>
<p>所以本篇文章使用基于 Attention 的模型，同时用一个简单但是有效的 greedy rollout baseline 强化学习方式来训练模型。</p>
<p>当然这个模型不止可以用来处理 TSP 问题，但是文章主要是以 TSP 为例进行说明。</p>
<h1 id="模型架构"><a href="#模型架构" class="headerlink" title="模型架构"></a>模型架构</h1><p>一个问题实例 $s$ 定义为一个有 $n$ 个点的完全图，$x_i$ 表示节点特征，在 TSP 问题中，它是一个 $2$ 维向量，表示在平面上的一个点。TSP 问题的解定义为 $\pi=(\pi_1,\dots,\pi_n)$，是节点的一个排列。</p>
<p>定义基于实例 $s$ 找到解 $\pi$ 的随机策略为：</p>
<script type="math/tex; mode=display">p_{\theta}(\pi|s)=\prod_{t=1}^{n}{p_{\theta}(\pi_t|s,\pi_{1:t-1})}</script><p>然后基于 Encoder-Decoder 框架，找到解 $\pi$。</p>
<h1 id="Encoder"><a href="#Encoder" class="headerlink" title="Encoder"></a>Encoder</h1><p><img src="../Attention, learn to solve routing problems/encoder.png" alt="Encoder"></p>
<p>输入 $x_i$（batchsize, graphsize, nodedim）。</p>
<p>Embedding $h_i^{(0)}=W^x x_i+b^x$（batchsize, graphsize, embeddim）。</p>
<p>N 层注意力层，每层由两个子层（MHA 和 FF）构成：</p>
<script type="math/tex; mode=display">
\begin{aligned}
\hat{h}_i&=\text{BN}^{\ell}(h_i^{(\ell-1)}+\text{MHA}_i^{\ell}(h_1^{(\ell-1)},\dots,h_n^{(\ell-1)}))\\
h_i^{(\ell)}&=\text{BN}^{\ell}(\hat{h}_i+\text{FF}^{\ell}(\hat{h}_i))\\
\end{aligned}</script><p>在计算最后一层 $h_i^{(N)}$ 时，同时计算均值 $\bar{h}^{(N)}=\frac{1}{n}\sum_{i=1}^{n}{h_i^{(N)}}$，两者都作为 Decoder 的输入。</p>
<h1 id="Attention-mechanism"><a href="#Attention-mechanism" class="headerlink" title="Attention mechanism"></a>Attention mechanism</h1><p><img src="../Attention, learn to solve routing problems/am.png" alt="Attention mechanism"></p>
<p>首先定义键维度 $d_k$ 和值维度 $d_v$。</p>
<p>通过如下计算得到键 $k_i\in\mathbb{R}^{d_k}$，值 $v_i\in\mathbb{R}^{d_v}$ 和询问 $q_i\in\mathbb{R}^{d_k}$：</p>
<script type="math/tex; mode=display">q_i=W^Q h_i,\ k_i=W^K h_i,\ v_i=W^V h_i</script><p>然后计算 compatibility $u_{ij}\in\mathbb{R}$：</p>
<script type="math/tex; mode=display">
u_{ij}=
\left\{\begin{matrix}
\frac{q_i^T k_j}{\sqrt{d_k}} & \text{if}\ i\ \text{adjacent to}\ j \\
-\infty & \text{otherwise}
\end{matrix}\right.</script><p>将其进行 softmax 操作得到注意力权重 $a_{ij}\in[0,1]$：</p>
<script type="math/tex; mode=display">a_{ij}=\frac{e^{u_{ij}}}{\sum_{j'}{e^{u_{ij'}}}}</script><p>最后把权重 $a_{ij}$ 和值 $v_j$ 进行加权求和得到输出：</p>
<script type="math/tex; mode=display">h'_i=\sum_j{a_{ij} v_j}</script><h1 id="Multi-head-attention-MHA"><a href="#Multi-head-attention-MHA" class="headerlink" title="Multi-head attention (MHA)"></a>Multi-head attention (MHA)</h1><p>简单来说就是分别做 M 次注意力机制，再把结果综合起来。</p>
<p>首先定义 $d_k=d_v=\frac{d_h}{M}=16$（模型中的 $d_h$ 和 M 分别为 $128$ 和 $8$），然后得到 M 个结果 $h’_{im}$。</p>
<p>最后利用 M 个可学习的参数矩阵 $W_m^O$ 将结果从 $d_v$ 维映射成 $d_h$ 维：</p>
<script type="math/tex; mode=display">\text{MHA}_i(h_1,\dots,h_n)=\sum_{m=1}^M {W_m^O h'_{im}}</script><h1 id="Feed-forward-sublayer-FF"><a href="#Feed-forward-sublayer-FF" class="headerlink" title="Feed-forward sublayer (FF)"></a>Feed-forward sublayer (FF)</h1><p>前馈子层用到了维度为 $d_{ff}=512$ 的隐藏层和 ReLu 激活函数：</p>
<script type="math/tex; mode=display">\text{FF}(\hat{h}_i)=W^{ff,1}\cdot\text{ReLu}(W^{ff,0}\hat{h}_i+b^{ff,0})+b^{ff,1}</script><h1 id="Batch-normalization-BN"><a href="#Batch-normalization-BN" class="headerlink" title="Batch normalization (BN)"></a>Batch normalization (BN)</h1><p>使用可学习的 $d_h$ 维参数 $w^{bn}$ 和 $b^{bn}$ 进行批量规范化：</p>
<script type="math/tex; mode=display">\text{BN}(h_i)=w^{bn}\odot\overline{\text{BN}}(h_i)+b^{bn}</script><p>$\overline{\text{BN}}$ 代表无仿射变换的批量规范化。</p>
<h1 id="Decoder"><a href="#Decoder" class="headerlink" title="Decoder"></a>Decoder</h1><p><img src="../Attention, learn to solve routing problems/decoder.png" alt="Attention mechanism"></p>
<p>在时间步 $t\in\{1,\dots,n\}$ 过程中，根据在时间步 $t’&lt;t$ 的结果 $\pi_{t’}$ 来生成本次的结果 $\pi_t$。</p>
<p>在这一过程中我们维护一个 context embedding $h_{(c)}^{(N)}$：</p>
<script type="math/tex; mode=display">
h_{(c)}^{(N)}=
\left\{\begin{matrix}
\left[\bar{h}^{(N)},h_{\pi_{t-1}}^{(N)},h_{\pi_{1}}^{(N)}\right] & t>1 \\
\left[\bar{h}^{(N)},v^1,v^f\right] & t=1
\end{matrix}\right.</script><p>其中 $v^1,v^f$ 分别是两个可学习 $d_h$ 维参数。</p>
<p>而 $h_{\pi_{t-1}}^{(N)},h_{\pi_{1}}^{(N)}$ 分别是已经选取的节点中，最后一个和第一个节点的 embedding，$\bar{h}^{(N)}$ 则是图 embedding。</p>
<p>然后 $[\cdot,\cdot,\cdot]$ 表示水平连接操作，这样我们就得到一个 $(3\cdot d_h)$ 维的 context embedding。</p>
<p>随后加入一个 MHA 层：</p>
<script type="math/tex; mode=display">q_{(c)}=W^Q h_{(c)},\ k_i=W^K h_i,\ v_i=W^V h_i</script><script type="math/tex; mode=display">
u_{(c)j}=
\left\{\begin{matrix}
\frac{q_{(c)}^T k_j}{\sqrt{d_k}} & \text{if}\ j\ne\pi_{t'}\ \forall t'<t \\
-\infty & \text{otherwise}
\end{matrix}\right.</script><p>这样我们可以得到一个新的 context embedding $h_{(c)}^{(N+1)}$，它的维度是 $d_h$ 维的。</p>
<p>最后再加入一个一头注意力层（M=1）：</p>
<script type="math/tex; mode=display">
u_{(c)j}=
\left\{\begin{matrix}
C\cdot\tanh\left(\frac{q_{(c)}^T k_j}{\sqrt{d_k}}\right) & \text{if}\ j\ne\pi_{t'}\ \forall t'<t \\
-\infty & \text{otherwise}
\end{matrix}\right.</script><p>然后再用 softmax 操作计算这一时间步中每个节点的选择概率：</p>
<script type="math/tex; mode=display">p_i=p_{\theta}(\pi_t=i|s,\pi_{1:t-1})=\frac{e^{u_{(c)i}}}{\sum_j{e^{u_{(c)j}}}}</script><p>这里有个需要注意的地方，就是第二个注意力层的询问 $q_{(c)}$ 在文中并没有直接告诉我们是怎么得到的，而且那个新的 context embedding $h_{(c)}^{(N+1)}$ 也并没有说具体作用是什么。</p>
<p>我一开始以为是下一个时间步的 context embedding，但是显然维度对应不上，而且跟文中给出的 Decoder 架构图例也不符，然后我就去翻了翻他的代码。</p>
<p>代码中的 heads 即为 $h_{(c)}^{(N+1)}$，可以看到它经过一个 self.project_out 操作得到 final_Q，即 $q_{(c)}$。</p>
<p><img src="../Attention, learn to solve routing problems/code_0.png" alt="Attention mechanism"></p>
<p>然后这个 self.project_out 操作实际上就是一个全连接层。</p>
<p><img src="../Attention, learn to solve routing problems/code_1.png" alt="Attention mechanism"></p>
<h1 id="Reinforce-with-greedy-rollout-baseline"><a href="#Reinforce-with-greedy-rollout-baseline" class="headerlink" title="Reinforce with greedy rollout baseline"></a>Reinforce with greedy rollout baseline</h1><p>根据给定的实例 $s$，Attention 模型可以从概率分布 $p_{\theta}(\pi|s)$ 中进行采样得到解 $\pi|s$，然后文章定义损失函数为解的期望值，即：</p>
<script type="math/tex; mode=display">\mathcal{L}(\theta|s)=\mathbb{E}_{p_{\theta}(\pi|s)}[L(\pi)]</script><p>然后可以用梯度下降来优化，对于基线 $b(s)$，其梯度为：</p>
<script type="math/tex; mode=display">\nabla\mathcal{L}(\theta|s)=\mathbb{E}_{p_{\theta}(\pi|s)}[(L(\pi)-b(s))\nabla\log{p_{\theta}(\pi|s)}]</script><p>文章采用 rolling out 算法来得到 $b(s)$，为了减少其方差，对于每个时间步都贪心地选择概率最大的节点来使得结果是确定性的。</p>
<p>在每个 epoch 结束后，才会拿最新策略和基线策略在 $10000$ 独立的实例上比较，且只有在有明显提升的时候才用它来更新基线，这样做的目的是防止模型过拟合。</p>
<p><img src="../Attention, learn to solve routing problems/reinforce.png" alt="Attention mechanism"></p>
<h1 id="与其他模型的比较"><a href="#与其他模型的比较" class="headerlink" title="与其他模型的比较"></a>与其他模型的比较</h1><p><img src="../Attention, learn to solve routing problems/compare.png" alt="Attention mechanism"></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>ML4CO</tag>
      </tags>
  </entry>
  <entry>
    <title>NIPS-2015-pointer-networks-Paper</title>
    <url>/NIPS-2015-pointer-networks-Paper/</url>
    <content><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>引入一种新的神经结构，我们将其称为 Pointer Net，用于学习输出序列的条件概率，其中输出序列的元素是对应于输入序列位置的离散标记。</p>
<p>现有的模型（如 sequence-to-sequence 和 Neural Turing Machines）都无法做到这一点，因为它们输入长度是固定的。</p>
<p>在这篇论文中，用 Ptr-Nets 求解了三个组合优化问题的近似解（凸包问题、Delaunay 三角形剖分问题和旅行商问题）。</p>
<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h1><p>对比了 Sequence-to-Sequence 和 Ptr-Net，Ptr-Net 不是像 Sequence-to-Sequence 那样将一个序列转换成另外一个序列，而是产生一系列指向输入序列元素的指针。</p>
<h1 id="2-模型"><a href="#2-模型" class="headerlink" title="2 模型"></a>2 模型</h1><h2 id="2-1-Sequence-to-Sequence-模型"><a href="#2-1-Sequence-to-Sequence-模型" class="headerlink" title="2.1 Sequence-to-Sequence 模型"></a>2.1 Sequence-to-Sequence 模型</h2><p>训练对 $(\mathcal{P},\mathcal{C}^\mathcal{P})$，计算概率 $p(\mathcal{C}^\mathcal{P}|\mathcal{P};\theta)$，$\theta$ 是 RNN 模型的参数，通过概率链式法则可以得到如下计算公式：</p>
<script type="math/tex; mode=display">p(\mathcal{C}^\mathcal{P}|\mathcal{P};\theta)=\prod_{i=1}^{m(\mathcal{P})} p(C_i|C_1,\dots,C_{i-1},\mathcal{P};\theta)</script><p>$\mathcal{P} = \{P_1,\dots,P_n\}$ 是 $n$ 个向量。</p>
<p>$\mathcal{\mathcal{C}^\mathcal{P}}=\{C_1,\dots,C_{m(\mathcal{P})}\}$ 是一个有 $m(\mathcal{P})$ 个下标的序列，$C_i$ 是 $1$ 到 $n$ 的一个数。</p>
<p>模型的目标是找到一个最优参数 $\theta^*$，即</p>
<script type="math/tex; mode=display">\theta^*=\arg \max_{\theta} \sum_{\mathcal{P},\mathcal{C}^\mathcal{P}} \log p(\mathcal{C}^\mathcal{P}|\mathcal{P};\theta)</script><p>然后模型分为 Encoder 和 Decoder 两个部分。在 Encoder 部分，每次用 $P_i$ 向量和之前的隐藏状态 $e_{i-1}$ 生成当前隐藏状态 $e_i$，直到收到 $\Rightarrow$ 表示输入序列结束。在 Decoder 部分，将之前的隐藏状态 $e_n$ 作为输入，类似的得到隐藏状态 $d_i$，之后每次利用 $d_{i-1}$ 进行预测，直到收到 $\Leftarrow$ 表示输出序列结束。</p>
<h2 id="2-2-注意力机制"><a href="#2-2-注意力机制" class="headerlink" title="2.2 注意力机制"></a>2.2 注意力机制</h2><p>先前的 Sequence-to-Sequence 模型在输入完序列 $\mathcal{P}$ 之后用固定维度的 RNN 处理整个输出序列 $\mathcal{C}^\mathcal{P}$，这限制了流向生成模型的信息和计算数量。而注意力模型通过额外的利用了注意力机制的神经网络来改良 Encoder 的输入序列。</p>
<p>首先定义 Encoder 的隐藏状态为 $(e_1,\dots,e_n)$，Decoder 的隐藏状态为 $(d_1,\dots,d_{m(\mathcal{P})})$，对于每个输出时刻 $i$，计算过程如下：</p>
<script type="math/tex; mode=display">
\begin{aligned}
u^i_j&=v^T \tanh(W_1 e_j+W_2 d_i),j\in(1,\dots,n)\\
a^i_j&=\text{softmax}(u^i_j),j\in(1,\dots,n)\\
d'_i&=\sum_{j=1}^n a^i_j e_j
\end{aligned}</script><p>其中 $v,W_1,W_2$ 是学习参数。</p>
<h2 id="2-3-指针网络"><a href="#2-3-指针网络" class="headerlink" title="2.3 指针网络"></a>2.3 指针网络</h2><p>之前的 Sequence-to-Sequence 模型在一个固定大小的输出中使用 softmax 分布来计算 $p(C_i|C_1,\dots,C_{i-1},\mathcal{P})$，因此它不能用于解决输出长度与输入序列长度相同的问题。为了解决这个问题，我们用注意力机制来模型化 $p(C_i|C_1,\dots,C_{i-1},\mathcal{P})$，其公式如下：</p>
<script type="math/tex; mode=display">
\begin{aligned}
u^i_j&=v^T \tanh(W_1 e_j+W_2 d_i),j\in(1,\dots,n)\\
p(C_i|C_1,\dots,C_{i-1},\mathcal{P})&=\text{softmax}(u^i)
\end{aligned}</script><h1 id="3-问题与数据集"><a href="#3-问题与数据集" class="headerlink" title="3 问题与数据集"></a>3 问题与数据集</h1><p>在训练阶段，输入数据是有 $n$ 个元素的平面点集 $\mathcal{P}=\{P_1,\dots,P_n\}$，其中 $P_j=(x_j,y_j)$ 表示一个点的坐标，通过这些点我们需要找到对应问题（凸包问题、Delaunay 三角形剖分问题和旅行商问题）的近似解。而输出 $\mathcal{\mathcal{C}^\mathcal{P}}=\{C_1,\dots,C_{m(\mathcal{P})}\}$ 代表了与点集 $\mathcal{P}$ 相关的解。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>ML4CO</tag>
      </tags>
  </entry>
  <entry>
    <title>dynamic-programming</title>
    <url>/dynamic-programming/</url>
    <content><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p>动态规划问题往往需要满足以下这些条件：最优子结构、无后效性和子问题重叠。</p>
<ul>
<li><p>最优子结构</p>
<p>  原问题的最优解包含子问题的最优解。</p>
</li>
<li><p>无后效性</p>
<p>  对于已经求解的子问题，不会再影响后续的决策。</p>
</li>
<li><p>子问题重叠</p>
<p>  如果有大量重叠的子问题，用空间将已经求解的子问题的解记录下来，从而提高效率。</p>
</li>
</ul>
<p>动态规划问题一般采用以下的思路解决：</p>
<ol>
<li>将原问题划分成若干个子问题，提取问题的特征（称之为<strong>状态</strong>）；</li>
<li>寻找每个状态的可能决策，即状态间的相互转移方式（即<strong>状态转移方程</strong>）；</li>
<li>按顺序求解问题。</li>
</ol>
<p>先来看一些经典题熟悉一下。</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/P1255">数楼梯</a></p>
<p>首先想想应该怎么定义状态？如果我已经走到第 $i$ 阶楼梯，此时我只关心我有多少种走法可以走上来，而不关心具体是怎么走的，因此我们可以定义 $f(i)$ 表示走到第 $i$ 阶楼梯的走法，这便是子问题，而 $f(n)$ 就是原问题的答案。</p>
<p>然后考虑如何转移状态，想要走到第 $i$ 阶楼梯，只能从第 $i-1$ 阶走一步或者从第 $i-2$ 阶走两步，而前者有 $f(i-1)$ 种走法，后者有 $f(i-2)$ 种走法，那么我们可以得到 $f(i)=f(i-1)+f(i-2)$。</p>
<p>最后需要注意初始化边界状态，我们令 $f(0)=f(1)=1$，表示走到起点（即站着不动）或走到第 $1$ 阶楼梯都只有 $1$ 种走法。</p>
<p>想通过此题还需要高精度，我们可以先不管这个，把动态规划部分理解即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5010</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> f[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    f[<span class="number">0</span>] = f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++) f[i] = f[i - <span class="number">1</span>] + f[i - <span class="number">2</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, f[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例题：<a href="https://www.luogu.com.cn/problem/P1115">最大子段和</a></p>
<p>如果我们考虑令 $a_i$ 作为最大子段的最后一个整数，那就只需要考虑以 $a_{i-1}$ 作为结尾的最大后缀子段和是多少，我们不妨将其定义为 $f(i-1)$，而以 $a_i$ 作为结尾的最大后缀子段和就是 $f(i)$。</p>
<p>那么此时 $a_i$ 有两种选择：</p>
<ol>
<li>跟以 $a_{i-1}$ 作为结尾的最大后缀子段合并（这需要 $f(i-1)$ 大于零，否则合并之后结果更差）;</li>
<li>自己单独一个整数作为一段。</li>
</ol>
<p>所以状态转移方程就出来了</p>
<script type="math/tex; mode=display">
f(i)=
\begin{cases}
f(i-1)+a_i & \text{ if } f(i-1)>0 \\
a_i & \text{ else }
\end{cases}</script><p>最后 $\max\{f(i)\}$ 就是答案。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> n, a[N], f[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">-0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (f[i - <span class="number">1</span>] &lt;= <span class="number">0</span>) f[i] = a[i];</span><br><span class="line">        <span class="keyword">else</span> f[i] = f[i - <span class="number">1</span>] + a[i];</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, f[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例题：<a href="https://www.luogu.com.cn/problem/P1439">【模板】最长公共子序列</a></p>
<p>上面的题目都只需要记录一维状态，在本题我们可以用 $f(i,j)$ 表示 $a$ 序列的前 $i$ 个元素和 $b$ 序列的前 $j$ 个元素的最长公共子序列，最终 $f(n,n)$ 就是答案。</p>
<p>对于 $f(i,j)$，存在三种决策：如果 $a_i=b_j$，则可以将它们拼接到公共子序列的末尾；否则另外两种决策分别是跳过 $a_i$ 或 $b_j$，那么可以得到状态转移方程</p>
<script type="math/tex; mode=display">
f(i,j)=
\begin{cases}
f(i-1,j-1)+1 & \text{ if } a_i=b_j \\
\max(f(i-1,j),f(i,j-1)) & \text{ else }
\end{cases}</script><p>由于需要枚举两维状态，因此时间复杂度是 $O(n^2)$，尚不足以通过此题。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n, a[N], b[N], f[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] == b[j]) f[i][j] = f[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> f[i][j] = <span class="built_in">max</span>(f[i - <span class="number">1</span>][j], f[i][j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, f[n][n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意到本题的两个序列有一个性质：都是 $1,2,\dots,n$ 的排列。这意味着，对于某个 $a_i$，有且仅有一个 $b_{i’}$ 与其相等，反过来也同样成立。</p>
<p>然后我们枚举 $b_i$，并定义 $f(l)$ 表示：到目前为止（即只考虑 $b$ 序列的前 $i-1$ 个元素的前提下），长度为 $l$ 的公共子序列至少需要 $a$ 序列的前 $f(l)$ 个元素才能得到，显然 $a_{f(l)}$ 就是这个公共子序列的最后一个元素。</p>
<p>那么对于 $b_i$，刚刚提到有且仅有一个 $a_{i’}$ 与其相等，若存在 $l$ 使得 $i’&gt;f(l)$，则 $b_i,a_{i’}$ 就可以构成一个新的长度为 $l+1$ 的公共子序列的结尾。因此如果我们找到 $\max\{l\}$ 满足 $i’&gt;f(l)$，就得到了以 $b_i,a_{i’}$ 作为结尾的最长公共子序列长度，即 $\max\{l\}+1$。</p>
<p>同时不难发现，$f(l)$ 是随着 $l$ 的增大而单调递增的（否则更长的公共子序列反而只需要更少的 $a$ 序列的元素就可以得到，显然是矛盾的），因此我们可以用二分在 $O(\log n)$ 的时间复杂度下找到 $\max\{l\}$，最终总的时间复杂度为 $O(n\log n)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n, a[N], b[N], c[N], f[N], len;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        c[a[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class="line">        f[i] = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c[b[i]] &gt;= f[len]) f[++ len] = c[b[i]];</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> l = <span class="number">1</span>, r = len, mid;</span><br><span class="line">            <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">                mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (c[b[i]] &gt;= f[mid]) l = mid + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            f[l] = <span class="built_in">min</span>(f[l], c[b[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, len);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="区间-DP"><a href="#区间-DP" class="headerlink" title="区间 DP"></a>区间 DP</h2><p>区间 DP 是线性 DP 的扩展，它有以下特点：</p>
<ol>
<li><p>能将问题分解为能够两两合并的子问题；</p>
</li>
<li><p>能够枚举合并点，将问题分为左右两个子问题，最后把子问题的最优解进行合并从而得到原问题的最优解。</p>
</li>
</ol>
<p>对于这类问题，我们通常定义状态 $f(i,j)$ 表示将下标 $i$ 到 $j$ 的所有元素合并能获得的最大价值，然后枚举合并点 $k$，可以得到如下的状态转移方程</p>
<script type="math/tex; mode=display">f(i,j)=\max\{f(i,k)+f(k+1,j)+c\}</script><p>其中 $c$ 是价值函数，表示这次合并所带来的价值，然状态转移方程不一定总是上述形式，需要具体问题具体分析。</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/P1775">石子合并（弱化版）</a></p>
<p>可以说是区间 DP 的经典题目了，状态的定义和状态转移方程也和上述的类似，只是题目要求最小代价，因此在这里我们需要取最小值而不是最大值，同时这里的代价函数 $c$ 根据题意可以知道是区间 $[i,j]$ 内所有石子的质量之和。</p>
<p>每次直接计算 $c$ 的时间复杂度是 $O(n)$，但是我们可以通过提前预处理石子质量的前缀和 $sum_i$，然后利用 $sum_j-sum_{i-1}$ 就可以 $O(1)$ 计算 $c$ 了。最后的状态转移方程如下</p>
<script type="math/tex; mode=display">f(i,j)=\min\{f(i,k)+f(k+1,j)+sum_j-sum_{i-1}\}</script><p>接着我们就可能写出如下的程序。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; j ++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = i; k &lt; j; k ++)</span><br><span class="line">            f[i][j] = <span class="built_in">min</span>(f[i][j], f[i][k] + f[k + <span class="number">1</span>][j] + sum[j] - sum[i - <span class="number">1</span>]);</span><br></pre></td></tr></table></figure>
<p>嗯，怎么回事，怎么连样例都过不了？</p>
<p>实际上，这里 $i,j$ 可不能随便枚举，举个例子，在上述的代码中，当我们计算 $f(1,3)$ 时，$f(2,3)$ 都还没开始计算呢，既然子问题的最优解都还没有得到，怎么可能得到原问题的最优解。</p>
<p>那么该如何保证子问题先于原问题进行计算呢？不难发现子问题的区间长度肯定是更短的，因此我们先处理区间长度为 $1$ 的问题（在本题中即意味着单个石子，无需合并，即 $f(i,i)=0$），再处理区间长度为 $2$ 的问题……。</p>
<p>不难看出该算法的时间复杂度是 $O(n^3)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">310</span>;</span><br><span class="line"><span class="type">int</span> n, a[N], sum[N], f[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + a[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)</span><br><span class="line">            <span class="keyword">if</span>  (j != i) f[i][j] = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> len = <span class="number">2</span>; len &lt;= n; len ++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt;= n; i ++) &#123;</span><br><span class="line">            <span class="type">int</span> j = i + len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = i; k &lt; j; k ++)</span><br><span class="line">                f[i][j] = <span class="built_in">min</span>(f[i][j], f[i][k] + f[k + <span class="number">1</span>][j] + sum[j] - sum[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, f[<span class="number">1</span>][n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例题：<a href="https://www.luogu.com.cn/problem/P1880">[NOI1995] 石子合并</a></p>
<p>注意此题和上一题的区别，在此题中石子是环形排布的，不同于之前我们所讲的链形的情况，那么该如何解决呢？</p>
<p>如果我们把环从某个地方断开变成链，问题就和刚刚一模一样了，然后我们枚举断开的位置，就能得到想要的最值了，但是枚举需要 $O(n)$ 的时间复杂度，算上区间 DP 的 $O(n^3)$，总共需要 $O(n^4)$ 的时间复杂度，想想该如何优化？（不过对于本题的数据范围好像不优化也能通过。）</p>
<p>我们不妨把石子复制一遍，变成 $2n$ 个石子，其中 $a_{n+i}=a_i$。然后我们将其看作链，直接进行区间 DP，那么 $f(1,n),f(2,n+1),\dots,f(n,2n-1)$ 就正好对应了环从不同位置断开之后的子问题的解，然后取其中的最值就是答案了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">210</span>;</span><br><span class="line"><span class="type">int</span> n, a[N], sum[N], f[N][N], g[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + a[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">2</span> * n; j ++)</span><br><span class="line">            <span class="keyword">if</span>  (j != i) f[i][j] = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n + <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i ++) &#123;</span><br><span class="line">        a[i] = a[i - n];</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + a[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">2</span> * n; j ++)</span><br><span class="line">            <span class="keyword">if</span>  (j != i) f[i][j] = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> len = <span class="number">2</span>; len &lt;= n; len ++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt;= <span class="number">2</span> * n; i ++) &#123;</span><br><span class="line">            <span class="type">int</span> j = i + len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = i; k &lt; j; k ++) &#123;</span><br><span class="line">                f[i][j] = <span class="built_in">min</span>(f[i][j], f[i][k] + f[k + <span class="number">1</span>][j] + sum[j] - sum[i - <span class="number">1</span>]);</span><br><span class="line">                g[i][j] = <span class="built_in">max</span>(g[i][j], g[i][k] + g[k + <span class="number">1</span>][j] + sum[j] - sum[i - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="type">int</span> ansf = <span class="number">0x3f3f3f3f</span>, ansg = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        ansf = <span class="built_in">min</span>(ansf, f[i][n + i - <span class="number">1</span>]);</span><br><span class="line">        ansg = <span class="built_in">max</span>(ansg, g[i][n + i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n%d\n&quot;</span>, ansf, ansg);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="0-1-背包"><a href="#0-1-背包" class="headerlink" title="0-1 背包"></a>0-1 背包</h2><p>背包问题形如：有 $n$ 件物品和一个容量为 $m$ 的背包，第 $i$ 件物品的重量为 $w_i$，价值为 $v_i$，可以将任意物品装入背包，在不超过容量 $m$ 的前提下，能得到的最大价值是多少？</p>
<p>而 0-1 背包则是加了一个限制：相同物品最多只能取走一次。</p>
<p>首先可以很容易定义状态 $f(i,j)$ 表示在前 $i$ 个物品中，质量不超过 $j$ 所能得到的最大价值。那么对于第 $i$ 个物品，要么跳过不取，要么消耗 $w_i$ 的体积取走并得到 $v_i$ 的价值，因此有状态转移方程</p>
<script type="math/tex; mode=display">f(i,j)=\max(f(i-1,j),f(i-1,j-w_i)+v_i)</script><p>时间复杂度和空间复杂度都是 $O(nm)$。</p>
<p>对于这个状态定义，实际上第一维是可以去掉的，即直接用 $f(j)$ 表示到目前为止（即前 $i-1$ 个物品中），质量不超过 $j$ 所能得到的最大价值。那么对于物品 $i$：若其不取，则 $f(j)$ 无需变化；若取，则同样地从 $f(j-w_i)+v_i$ 进行转移。因此有如下状态转移方程</p>
<script type="math/tex; mode=display">f(j)=\max(f(j),f(j-w_i)+v_i)</script><p>这样就把空间复杂度优化到 $O(m)$ 了。</p>
<p>此时我们可能会写出这样的代码。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = w[i]; j &lt;= m; j ++)</span><br><span class="line">        f[j] = <span class="built_in">max</span>(f[j], f[j - w[i]] + v[i]);</span><br></pre></td></tr></table></figure>
<p>看起来和状态转移方程一样，但实际上是错误的，$j$ 的枚举顺序错了（实际上这就是完全背包的写法）。因为我们去掉了第一维状态，所以如果 $j$ 是递增枚举的，那么 $f(j-w_i)$ 是有可能已经取了第 $i$ 件物品的，这不符合 0-1 背包的限制。</p>
<p>而如果我们递减地去枚举 $j$，则 $f(j-w_i)$ 尚未包含物品 $i$，此时就可以正确地转移了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;= w[i]; j --)</span><br><span class="line">        f[j] = <span class="built_in">max</span>(f[j], f[j - w[i]] + v[i]);</span><br></pre></td></tr></table></figure>
<p>例题：<a href="https://www.luogu.com.cn/problem/P2871">[USACO07DEC] Charm Bracelet S</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3410</span>, M = <span class="number">13000</span>;</span><br><span class="line"><span class="type">int</span> n, m, w[N], v[N], f[M];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;w[i], &amp;v[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;= w[i]; j --)</span><br><span class="line">            f[j] = <span class="built_in">max</span>(f[j], f[j - w[i]] + v[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, f[m]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h2><p>与 0-1 背包不同，完全背包中所有物品都可以取任意多次，而具体的做法刚刚也已经提到了（直接递增枚举 $j$ 即可），我们直接看一道模板题。</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/P1616">疯狂的采药</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>, M = <span class="number">10000010</span>;</span><br><span class="line"><span class="type">int</span> n, m, w[N], v[N];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> f[M];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;m, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;w[i], &amp;v[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = w[i]; j &lt;= m; j ++)</span><br><span class="line">            f[j] = <span class="built_in">max</span>(f[j], f[j - w[i]] + v[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, f[m]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h2><p>不同于前两种背包问题，多重背包中多了一个属性：第 $i$ 种物品的数量是 $k_i$，而非一个或无穷个。</p>
<p>一个很朴素的想法是：“每种物品至多取 $k_i$ 次” 可以转化为 “有 $k_i$ 个相同的物品，每个至多取一次”，这样我们就把问题又转化为了 0-1 背包，时间复杂度是 $O(m\sum_{i=1}^n k_i)$。</p>
<p>例题：<a href="https://www.acwing.com/file_system/file/content/whole/index/content/3555/">多重背包问题 I</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>, M = <span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> n, m, w[N], v[N], k[N], f[M];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;w[i], &amp;v[i], &amp;k[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">1</span>; l &lt;= k[i]; l ++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;= w[i]; j --)</span><br><span class="line">                f[j] = <span class="built_in">max</span>(f[j], f[j - w[i]] + v[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, f[m]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二进制拆分优化多重背包"><a href="#二进制拆分优化多重背包" class="headerlink" title="二进制拆分优化多重背包"></a>二进制拆分优化多重背包</h2><p>上述多重问题中我们将每个物品都拆成了 $k_i$ 份，显然如果 $k_i$ 很大的话，这个算法的效率是非常低的，因此我们可以考虑将 $k_i$ 进行二进制拆分：</p>
<ol>
<li>找到最大的整数 $s$ 使得 $k_i\geq 2^s-1$；</li>
<li>将 $k_i$ 拆分成 $2^0,2^1,2^2,\dots,2^{s-1}$ 和 $k_i-(2^s-1)$。$(\sum_{i=0}^{s-1} 2^i=2^s-1)$</li>
</ol>
<p>这样子对于任意一个整数 $x(1\leq x\leq k_i)$，都可以用这些拆分后的数组成，证明如下：</p>
<ul>
<li>若 $x\leq 2^s-1$，则必然可以由 $2^0,2^1,2^2,\dots,2^{s-1}$ 组成；</li>
<li>否则，令 $y=x-(k_i-(2^s-1))$，显然 $y\leq 2^s-1$，那么 $y$ 可以由 $2^0,2^1,2^2,\dots,2^{s-1}$ 组成，那么组成 $y$ 的那些数再加上 $k_i-(2^s-1)$ 就可以组成 $x$。</li>
</ul>
<p>经过二进制拆分优化后，多重背包的时间复杂度为 $O(m\sum_{i=1}^n {\log k_i})$。</p>
<p>例题：<a href="https://www.acwing.com/file_system/file/content/whole/index/content/3556/">多重背包问题 II</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>, M = <span class="number">2010</span>;</span><br><span class="line"><span class="type">int</span> n, m, w[N], v[N], k[N], f[M];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;w[i], &amp;v[i], &amp;k[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> s = <span class="number">0</span>; s &lt;= <span class="number">12</span>; s ++)</span><br><span class="line">            <span class="keyword">if</span> (k[i] - (<span class="number">1</span> &lt;&lt; s) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                vec.<span class="built_in">push_back</span>(<span class="number">1</span> &lt;&lt; s);</span><br><span class="line">                k[i] -= (<span class="number">1</span> &lt;&lt; s);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (k[i]) vec.<span class="built_in">push_back</span>(k[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> l : vec)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;= l * w[i]; j --)</span><br><span class="line">                f[j] = <span class="built_in">max</span>(f[j], f[j - l * w[i]] + l * v[i]);</span><br><span class="line">                </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, f[m]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="分组背包"><a href="#分组背包" class="headerlink" title="分组背包"></a>分组背包</h2><p>在分组背包问题中，题目背景又有了一些改变：物品被分为 $n$ 组，第 $i$ 组有 $k_i$ 个不同的物品，其中第 $j$ 个物品重量为 $w_{i,j}$，价值为 $v_{i,j}$，同一组的物品最多只能取走一个。</p>
<p>我们想想刚刚提到的 0-1 背包：当我们计算 $f(j)$ 时，由于是递减枚举 $j$，所以 $f(j-w_i)$ 尚未包含物品 $i$。</p>
<p>这个思路同样可以用在分组背包：依旧是递减枚举 $j$，同时在最内层枚举 $l$ 表示第 $i$ 组的第 $l$ 个物品，这样在计算 $f(j)$ 时，$f(j-w_{i,l})$ 尚未包含第 $i$ 组内的任何物品，同时又保证了每组物品最多取一个。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;= <span class="number">0</span>; j --)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">1</span>; l &lt;= k[i]; l ++)</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= w[i][l])</span><br><span class="line">                f[j] = <span class="built_in">max</span>(f[j], f[j - w[i][l]] + v[i][l]);</span><br></pre></td></tr></table></figure>
<h2 id="容量很大但价值很小的背包问题"><a href="#容量很大但价值很小的背包问题" class="headerlink" title="容量很大但价值很小的背包问题"></a>容量很大但价值很小的背包问题</h2><p>有这么一类背包问题，它的背包容量可能很大 $(1\leq m\leq 10^9)$，但是它的物品数量和价值都比较小 $(1\leq n,v_i\leq 10^2)$。以 0-1 背包为例，如果直接进行背包 DP，时间复杂度是 $O(nm)$ 的，显然无法解决。</p>
<p>考虑到价值比较小，我们不妨这么定义状态，令 $f(j)$ 表示达到价值 $j$ 所需要的最小质量，状态转移方程实际上也是类似的</p>
<script type="math/tex; mode=display">f(j)=\min(f(j),f(j-v_i)+w_i)</script><p>不难计算 $j$ 的值域只有 $O(\sum_{i=1}^n {v_i})$，因此最终的时间复杂度为 $O(n\sum_{i=1}^n {v_i})$。</p>
<h2 id="状态压缩-DP"><a href="#状态压缩-DP" class="headerlink" title="状态压缩 DP"></a>状态压缩 DP</h2><p>状态压缩 DP 的特点就是把状态压缩成整数来达到优化转移的目的，这类状态通常是用二进制整数来表示其含义（当然有的题目也可能是三进制），并且数据规模都比较小，一般是 $20$ 以内的整数。</p>
<p>同时，状压 DP 需要对位运算掌握比较熟练，比较常用的有 <code>&amp;</code>、<code>|</code>、<code>^</code>、<code>&lt;&lt;</code> 和 <code>&gt;&gt;</code>。</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/P1171">售货员的难题</a></p>
<p>观察到 $n$ 很小，并且每个村庄我们只关心是否已经去过，因此可以把每个村庄的访问情况用 $s$ 来表示，$s$ 的二进制下第 $i$ 位若为 $1$ 则表示第 $i$ 个村庄已经去过。</p>
<p>除了要记录哪些村庄已经去过，我们还需要知道自己位于哪一个村庄，所以可以用 $f(i,s)$ 表示目前位于第 $i$ 座村庄，所有村庄的访问情况是 $s$。</p>
<p>那么每次转移时我们遍历所有其他还未访问的村庄 $j$，令 $dis_{i,j}$ 表示从 $i$ 村庄到 $j$ 村庄的路程，那么有状态转移方程</p>
<script type="math/tex; mode=display">f(j,s|2^j)=\min\{f(i,s)+dis_{i,j}\}</script><p>总的时间复杂度是 $O(n^2 2^n)$，但是实际上跑不满这么多，不过还是稍微有点卡常。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">25</span>;</span><br><span class="line"><span class="type">int</span> n, dis[N][N], f[N][<span class="number">1</span> &lt;&lt; <span class="number">20</span> | <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j ++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;dis[i][j]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; (<span class="number">1</span> &lt;&lt; n); j ++)</span><br><span class="line">            f[i][j] = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">1</span> &lt;&lt; <span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> s = <span class="number">1</span>; s &lt; (<span class="number">1</span> &lt;&lt; n); s += <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(s &amp; (<span class="number">1</span> &lt;&lt; i))) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s &amp; (<span class="number">1</span> &lt;&lt; j)) <span class="keyword">continue</span>;</span><br><span class="line">                f[j][s | (<span class="number">1</span> &lt;&lt; j)] = <span class="built_in">min</span>(f[j][s | (<span class="number">1</span> &lt;&lt; j)], f[i][s] + dis[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i ++)</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, f[i][(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>] + dis[i][<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="树形-DP"><a href="#树形-DP" class="headerlink" title="树形 DP"></a>树形 DP</h2><p>树形 DP 跟其他 DP 问题本质上是一样的，只不过把问题套上了一个树的模型，原问题可以看作对求解整棵树的某个最优价值，而子问题自然就是拆分成若干个子树，然后求解这些子树的某个最优价值。</p>
<p>这类问题通常都是从最简单的叶子节点入手，然后一步一步向上转移。例如对于某个节点 $x$，在求解完 $x$ 的所有子节点 $y$ 的子树上的子问题之后，将子节点的最优价值合并得到 $x$ 子树的最优价值。</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/P1352">没有上司的舞会</a></p>
<p>非常典的树形 DP 模板题，首先考虑对于某个 $x$ 节点和它的子节点 $y$，$y$ 子树中有什么信息是我们关心的呢？</p>
<p>显然我们肯定关心 $y$ 是否参加舞会，因为这会直接影响 $x$ 是否参加舞会，除此之外就没有其他有用的信息了。那么我们不妨用 $f(x,0)$ 表示 $x$ 不参加舞会的前提下，$x$ 子树内能得到的最大快乐指数；用 $f(x,1)$ 表示 $x$ 参加舞会的前提下，$x$ 子树内能得到的最大快乐指数。</p>
<p>首先对于叶子节点来说，这两个值是很好求的（因为它们没有子节点需要考虑了）。那么对于某个非叶子节点 $x$，如果 $x$ 选择参加舞会，它的任何子节点 $y$ 都必然不能参加，那么有状态转移方程</p>
<script type="math/tex; mode=display">f(x,1)=a_x+\sum_{y\in \text{son}(x)} {f(y,0)}</script><p>而如果 $x$ 不参加舞会，则子节点 $y$ 参加与否都无关紧要，为了得到最优解我们当然选择两者中较大的值，即得到状态转移方程</p>
<script type="math/tex; mode=display">f(x,0)=\sum_{y\in \text{son}(x)} {\max(f(y,0),f(y,1))}</script><p>这样我们从根节点 DFS 一遍，自底向上地维护 DP 值即可，时间复杂度是 $O(n)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">6010</span>;</span><br><span class="line"><span class="type">int</span> n, a[N], rt, vis[N], f[N][<span class="number">2</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span> <span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    f[x][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    f[x][<span class="number">1</span>] = a[x];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> y : v[x]) &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(y);</span><br><span class="line">        f[x][<span class="number">1</span>] += f[y][<span class="number">0</span>];</span><br><span class="line">        f[x][<span class="number">0</span>] += <span class="built_in">max</span>(f[y][<span class="number">0</span>], f[y][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        v[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">        vis[x] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">if</span> (!vis[i])</span><br><span class="line">            rt = i;</span><br><span class="line">    <span class="built_in">dfs</span>(rt);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">max</span>(f[rt][<span class="number">0</span>], f[rt][<span class="number">1</span>]));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="树形背包-DP"><a href="#树形背包-DP" class="headerlink" title="树形背包 DP"></a>树形背包 DP</h2><p>树形背包 DP 是树形 DP 和背包 DP 的结合，这类题目通常需要在树上保留不超过 $m$ 个节点（不妨看作背包容量），对于节点 $x$ 其价值为 $v_x$，同时还有个隐藏属性，即重量 $w_x=1$，最后需要在不超过背包限制的前提下最大化价值之和。</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/P2015">二叉苹果树</a></p>
<p>这道题虽然限制是选择至多 $m$ 条树枝（即边）而非节点，但是本质上是一样的。</p>
<p>我们用 $f(x,i)$ 表示节点 $x$ 的子树内保留 $i$ 根树枝的最大收益，同时用 $size_x$ 表示 $x$ 子树内树枝的数量，接着考虑如何进行状态转移。</p>
<p>对于 $x$ 的子节点 $y$，我们不妨把 $f(y,0),f(y,1),\dots,f(y,size_y)$ 看作可以取走的物品，每个物品有自己的重量和价值，同时这一组物品最多只能取走一个，这分明就是分组背包嘛！然后根据题意，我们可以得到如下状态转移方程</p>
<script type="math/tex; mode=display">f(x,i)=\max\{f(x,i-j-1)+f(y,j)+c\}</script><p>其中 $c$ 是从 $x$ 到 $y$ 这根树枝上的价值。</p>
<p>在代码实现上，如果我们在枚举 $i,j$ 时，都枚举到有效的范围（什么是有效范围？即 $i\leq size_x,j\leq \min(i,size_y)$），那么可以证明总的时间复杂度是 $O(nm)$。实际上，对于所有物品重量为一的树形背包问题上都可以达到这个时间复杂度，具体的时间复杂度分析比较麻烦，我们目前不讨论。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> n, m, a[N], rt, vis[N], f[N][N], siz[N];</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; v[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span> <span class="params">(<span class="type">int</span> x, <span class="type">int</span> fa)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> p : v[x]) &#123;</span><br><span class="line">        <span class="type">int</span> y = p.first, z = p.second;</span><br><span class="line">        <span class="keyword">if</span> (y == fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(y, x);</span><br><span class="line">        siz[x] += siz[y] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = siz[x]; i &gt;= <span class="number">1</span>; i --)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="built_in">min</span>(i - <span class="number">1</span>, siz[y]); j ++)</span><br><span class="line">                f[x][i] = <span class="built_in">max</span>(f[x][i], f[x][i - j - <span class="number">1</span>] + f[y][j] + z);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        <span class="type">int</span> x, y, z;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);</span><br><span class="line">        v[x].<span class="built_in">push_back</span>(&#123;y, z&#125;);</span><br><span class="line">        v[y].<span class="built_in">push_back</span>(&#123;x, z&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, f[<span class="number">1</span>][m]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例题：<a href="https://www.luogu.com.cn/problem/P2014">[CTSC1997] 选课</a></p>
<p>我们把 $0$ 节点看作一个必选的虚点，这样题目就转化为在 $n+1$ 个节点的树上保留 $m+1$ 个节点的树形背包问题了。</p>
<p>我们定义 $f(x,i)$ 表示 $x$ 节点的子树内，保留 $i$ 个节点的最大学分，显然我们可以初始化 $f(x,1)=a_x$，状态转移方程跟上一题也是大同小异，直接看代码吧。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">310</span>;</span><br><span class="line"><span class="type">int</span> n, m, a[N], f[N][N], siz[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span> <span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    f[x][<span class="number">1</span>] = a[x];</span><br><span class="line">    siz[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> y : v[x]) &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(y);</span><br><span class="line">        siz[x] += siz[y];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = siz[x]; i &gt;= <span class="number">1</span>; i --)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="built_in">min</span>(i - <span class="number">1</span>, siz[y]); j ++)</span><br><span class="line">                f[x][i] = <span class="built_in">max</span>(f[x][i], f[x][i - j] + f[y][j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    m ++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;a[i]);</span><br><span class="line">        v[x].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, f[<span class="number">0</span>][m]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="换根-DP"><a href="#换根-DP" class="headerlink" title="换根 DP"></a>换根 DP</h2><p>换根 DP 问题通常不会指定根节点，而要求我们计算对于不同的根节点，某个信息量（如子节点深度和）的具体值是多少。</p>
<p>这类问题通常需要进行两遍 DFS，我们首先以任意一个节点作为根节点进行 DFS，自下而上地计算以该点作为根节点时这个信息量的值。然后再从这个根节点开始 DFS，并利用所求信息量的一些性质，自上而下地计算当根变化时该信息量的变化值。</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/P3478">[POI2008] STA-Station</a></p>
<p>首先我们考虑固定根节点（不妨以 $1$ 作为根节点）时如何求解答案。定义 $f(x)$ 表示在 $x$ 的子树内节点的深度和，$size_x$ 表示在 $x$ 的子树内的节点数量。</p>
<p>对于 $x$ 的子节点 $y$，当其接上 $x$ 之后，$y$ 子树内所有节点的深度都会加一，因此很容易得到状态转移方程</p>
<script type="math/tex; mode=display">f(x)=\sum_{y\in \text{son}(x)} {f(y)+size_y}</script><p>然后我们从根节点出发 DFS 一遍就能得到所有节点的 $f(x)$ 值。</p>
<p>在第二遍 DFS 时，我们改变一下 $f(x)$ 的定义：以 $x$ 作为根节点时所有节点的深度和。</p>
<p>对于某个节点 $x$ 和其某个子节点 $y$，假设我们已经得到 $f(x)$，考虑当根节点从 $x$ 转移到 $y$ 时节点的深度和会如何变化呢？我们分情况讨论：</p>
<ul>
<li><p>对于在 $y$ 子树内的节点，由于离根节点更近了，所以深度都减少一，那么总深度减少了 $size_y$；</p>
</li>
<li><p>对于不在 $y$ 子树内的节点，由于离根节点更远了，所以深度都增加一，那么总深度增加了 $n-size_y$；</p>
</li>
</ul>
<p>所以可以得到状态转移方程</p>
<script type="math/tex; mode=display">f(y)=f(x)+n-2size_y</script><p>所以第二遍 DFS 我们从 $1$ 出发（显然此时 $f(1)$ 已经是我们想求的了，因为我们最开始就是以 $1$ 作为根节点的），根据上述转移方程得到所有节点的 $f(x)$ 值，最终的时间复杂度是 $O(n)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> n, siz[N], ans2;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> f[N], ans1;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span> <span class="params">(<span class="type">int</span> x, <span class="type">int</span> fa)</span> </span>&#123;</span><br><span class="line">    siz[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> y : v[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y == fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(y, x);</span><br><span class="line">        siz[x] += siz[y];</span><br><span class="line">        f[x] += f[y] + siz[y];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span> <span class="params">(<span class="type">int</span> x, <span class="type">int</span> fa)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x != <span class="number">1</span>) f[x] = f[fa] + n - <span class="number">2</span> * siz[x];</span><br><span class="line">    <span class="keyword">if</span> (f[x] &gt; ans1) &#123;</span><br><span class="line">        ans1 = f[x];</span><br><span class="line">        ans2 = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> y : v[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y == fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(y, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        v[x].<span class="built_in">push_back</span>(y);</span><br><span class="line">        v[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="单调队列优化-DP"><a href="#单调队列优化-DP" class="headerlink" title="单调队列优化 DP"></a>单调队列优化 DP</h2><p>单调队列主要用于维护两端指针具有单调性的区间最值，它可以帮助我们快速找到状态转移的最优决策点，其具体步骤如下：</p>
<ol>
<li>加入所需元素：向单调队列不断加入元素直到当前元素达到所求区间的右边界，这样就能保证所需元素都在单调队列中，在这一过程中同时需要维护单调性。</li>
<li>弹出越界队首：单调队列本质上是维护的是所有已插入元素的最值，但我们想要的往往是一个区间最值。于是我们弹出在左边界外的元素，以保证单调队列中的元素都在所求区间中。</li>
<li>获取最值：直接取队首作为答案即可。</li>
</ol>
<p>我们先用一道例题来熟悉一下单调队列。</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/P1886">滑动窗口 /【模板】单调队列</a></p>
<p>题目需要分别求出每次窗口区间内的最小值和最大值，下面我们以最小值为例进行说明。</p>
<p>首先需要把区间右端点以内的元素都放入单调队列中，即当窗口右端点在 $i$ 时，把所有尚未放入单调队列的元素 $a_{i’}(i’\leq i)$ 依次放入。</p>
<p>在这一过程中，我们需要维护单调队列的单调递增性（或单调不减性）：因为新放入的元素的合法时间一定是长于已经放入的元素的，所以当新元素比老元素更小时，老元素就没有存在的必要了，直接从队尾弹出，最后直到队尾元素比新元素更小，这才把新元素从队尾加入单调队列。</p>
<p>因为窗口的左端点也会随着窗口的滑动而右移，在这一过程中有的元素虽然还在单调队列里面，但是已经过期了。不过我们不需要挑出所有过期的元素，我们只关心队首是否过期，如果已经过期则弹出，否则队首就是目前窗口内的最小值。</p>
<p>因为每个元素最多入队和出队一次，因此每次维护单调队列是均摊 $O(1)$ 的，所以总的时间复杂度是 $O(n)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> n, k, a[N], q1[N], q2[N], h1, t1, h2, t2, ans1[N], ans2[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    h1 = h2 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; k; i ++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (t1 &gt;= h1 &amp;&amp; a[i] &lt;= a[q1[t1]]) t1 --;</span><br><span class="line">        q1[++ t1] = i;</span><br><span class="line">        <span class="keyword">while</span> (t2 &gt;= h2 &amp;&amp; a[i] &gt;= a[q2[t2]]) t2 --;</span><br><span class="line">        q2[++ t2] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = k; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (t1 &gt;= h1 &amp;&amp; a[i] &lt;= a[q1[t1]]) t1 --;</span><br><span class="line">        q1[++ t1] = i;</span><br><span class="line">        <span class="keyword">while</span> (t2 &gt;= h2 &amp;&amp; a[i] &gt;= a[q2[t2]]) t2 --;</span><br><span class="line">        q2[++ t2] = i;</span><br><span class="line">        <span class="keyword">while</span> (q1[h1] &lt;= i - k) h1 ++;</span><br><span class="line">        <span class="keyword">while</span> (q2[h2] &lt;= i - k) h2 ++;</span><br><span class="line">        ans1[i - k + <span class="number">1</span>] = a[q1[h1]];</span><br><span class="line">        ans2[i - k + <span class="number">1</span>] = a[q2[h2]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - k + <span class="number">1</span>; i ++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans1[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - k + <span class="number">1</span>; i ++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans2[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例题：<a href="https://codeforces.com/contest/372/problem/C">Codeforces 372C</a></p>
<p>题意：有 $n$ 座城市（可以看作坐标轴上连续的 $n$ 个整点），有 $m$ 朵烟花要放，放第 $i$ 朵烟花的时间是 $t_i$，当其放出的时候，如果你的位置是 $x$，则会获得 $b_i-|a_i-x|$ 的快乐值。初始时你可以在任意位置，并且每个单位时间内可以移动不超过 $d$ 的单位距离，求能收获的最大快乐值。</p>
<p>令 $f(i,j)$ 表示当 $i$ 朵烟花放出时，位置在 $j$ 能获得的最大快乐值，那么不难得到状态转移方程</p>
<script type="math/tex; mode=display">f(i,j)=\max\{f(i-1,k)+b_i-|a_i-j|\}</script><p>其中 $j-(t_i-t_{i-1})\times d\leq k\leq j+(t_i-t_{i-1})\times d$。</p>
<p>如果我们已经枚举了 $i,j$，那么 $b_i-|a_i-j|$ 实际上就是常量，可以提到外面去，得到</p>
<script type="math/tex; mode=display">f(i,j)=\max\{f(i-1,k)\}+b_i-|a_i-j|</script><p>所以我们要做的就是找到决策点 $k(k\in[j-(t_i-t_{i-1})\times d,j+(t_i-t_{i-1})\times d])$ 使得 $f(i-1,k)$ 最大。</p>
<p>有没有发现，这段区间本质上就是上一题中提到的窗口，每次随着 $j$ 的移动而改变。因此我们要做的就是维护一个跟上一题差不多的单调队列，这样就可以每次 $O(1)$ 找到决策点 $k$ 了，时间复杂度 $O(nm)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">150010</span>, M = <span class="number">310</span>;</span><br><span class="line"><span class="type">int</span> n, m, d, a[M], b[M], ti[M], q[N], h, t, sta;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> f[<span class="number">2</span>][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;d);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a[i], &amp;b[i], &amp;ti[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) &#123;</span><br><span class="line">        h = <span class="number">1</span>;</span><br><span class="line">        t = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (r &lt; <span class="built_in">min</span>(j + <span class="number">1ll</span> * (ti[i] - ti[i - <span class="number">1</span>]) * d, <span class="number">1ll</span> * n)) &#123;</span><br><span class="line">                r ++;</span><br><span class="line">                <span class="keyword">while</span> (h &lt;= t &amp;&amp; f[sta][r] &gt;= f[sta][q[t]]) t --;</span><br><span class="line">                q[++ t] = r;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (h &lt;= t &amp;&amp; q[h] &lt; j - <span class="number">1ll</span> * (ti[i] - ti[i - <span class="number">1</span>]) * d) h ++;</span><br><span class="line">            f[sta ^ <span class="number">1</span>][j] = f[sta][q[h]] + b[i] - <span class="built_in">abs</span>(a[i] - j);</span><br><span class="line">        &#125;</span><br><span class="line">        sta ^= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">-0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, f[sta][i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例题：<a href="https://www.acwing.com/file_system/file/content/whole/index/content/3557/">多重背包问题 III</a></p>
<p>同样是多重背包问题，之前我们用二进制拆分将时间复杂度优化到了 $O(m\sum_{i=1}^n {\log k_i})$，利用单调队列我们还可以再进行优化。</p>
<p>令 $f(i,j)$ 表示前 $i$ 个物品，在不超过 $j$ 重量的前提下能获得的最大价值，朴素的转移方程为</p>
<script type="math/tex; mode=display">f(i,j)=\max_{k=0}^{k_i}\{f(i-1,j-k\times w_i)+k\times v_i\}</script><p>显然一定存在整数 $x,y(0\leq x\leq \lfloor \frac{m}{w_i}\rfloor,0\leq y&lt;w_i)$ 使得 $j=x\times w_i+y$（实际上就是 $j$ 除以 $w_i$ 的商和余数），所以可以通过枚举 $x,y$ 代替枚举 $j$。</p>
<p>同时，对于 $j-k\times w_i$，其除以 $w_i$ 的余数仍然是 $y$，所以一定存在 $x’,y$ 满足 $j-k\times w_i=x’\times w_i+y$，事实上不难算出 $x’=x-k$。</p>
<p>为方便表述，我们令 $g(x,y)=f(i,x\times w_i+y),g’(x,y)=f(i-1,x\times w_i+y)$。那么我们可以把转移方程表示成</p>
<script type="math/tex; mode=display">g(x,y)=\max_{k=0}^{k_i}\{g'(x-k,y)+k\times v_i\}</script><p>因为 $k\times v_i=-(x-k)\times v_i+x\times v_i$，所以又可以得到</p>
<script type="math/tex; mode=display">g(x,y)=\max_{k=0}^{k_i}\{g'(x-k,y)-(x-k)\times v_i+x\times v_i\}</script><p>我们令 $G(x,y)=g’(x,y)-x\times v_i$，因为已经枚举了 $x,y$，所以 $x\times v_i$ 可以认为是常量，可以提出。这样就得到</p>
<script type="math/tex; mode=display">g(x,y)=\max_{k=0}^{k_i}\{G(x-k,y)\}+x\times v_i</script><p>当 $k\in[0,k_i]$ 时，$x-k\in [x-k_i,x]$，因此我们又可以得到一个等价替换</p>
<script type="math/tex; mode=display">g(x,y)=\max\{G(k,y)\}+x\times v_i</script><p>其中 $k\in [x-k_i,x]$，又是滑动窗口！随着 $x$ 的移动，区间也跟着移动，然后我们需要维护区间内的元素最大值，从而快速找到决策点 $k$。</p>
<p>那么对于每个物品，每次计算的时间复杂度就是枚举 $x,y$ 的时间复杂度，即 $O(\lfloor \frac{m}{w_i}\rfloor)\times O(w_i)=O(m)$，最终总的时间复杂度为 $O(nm)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>, M = <span class="number">20010</span>;</span><br><span class="line"><span class="type">int</span> n, m, w[N], v[N], k[N], q[M], h, t, f[<span class="number">2</span>][M], sta;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">g</span> <span class="params">(<span class="type">int</span> i, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f[sta][x * w[i] + y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">G</span> <span class="params">(<span class="type">int</span> i, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">g</span>(i, x, y) - v[i] * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;w[i], &amp;v[i], &amp;k[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; w[i]; y ++) &#123;</span><br><span class="line">            h = <span class="number">1</span>;</span><br><span class="line">            t = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x * w[i] + y &lt;= m; x ++) &#123;</span><br><span class="line">                <span class="keyword">while</span> (h &lt;= t &amp;&amp; <span class="built_in">G</span>(i, x, y) &gt;= <span class="built_in">G</span>(i, q[t], y)) t --;</span><br><span class="line">                q[++ t] = x;</span><br><span class="line">                <span class="keyword">while</span> (h &lt;= t &amp;&amp; q[h] &lt; x - k[i]) h ++;</span><br><span class="line">                f[sta ^ <span class="number">1</span>][x * w[i] + y] = <span class="built_in">G</span>(i, q[h], y) + x * v[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sta ^= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, f[sta][m]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="计数-DP"><a href="#计数-DP" class="headerlink" title="计数 DP"></a>计数 DP</h2><p>之前我们所讲的 DP 基本上都是解决最优化问题（即求解某个问题的最优价值或者最小代价），而计数 DP 则是用类似于 DP 中的状态定义和状态转移方程来解决计数的问题。</p>
<p>具体来说，如果我们要求解一个集合中的元素个数，我们可以把它分解成若干个不相交的集合，然后分别计算这些子集合各自的元素个数，最后原集合的元素个数就是这个子集合元素个数的总和。</p>
<p>我们最开始提到的数楼梯那道题目也是计数 DP，但是计数 DP 其实并没有什么很常用的套路，下面通过讲几道题来帮助大家熟悉一下这类问题。</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/P1025">[NOIP2001 提高组] 数的划分</a></p>
<p>仔细想想，这个问题是不是跟背包问题非常像，只不过背包问题需要我们求解的是最大价值，而此时我们需求求解的是方案数。</p>
<p>不过没关系，只需要稍微修改一下状态的定义就行，我们令 $f(i,j)$ 表示已经用 $j$ 个数字，数字之和是 $i$ 的方案数，最开始需要初始化 $f(0,0)=1$。</p>
<p>然后不妨把 $1,2,\dots,n$ 这些数字看作物品，这些数字我们可以任意取走（即完全背包），最后我们想要让取走的数字之和为 $n$，不妨看作将一个容量为 $n$ 的背包塞满，这么一看就跟背包问题几乎一样了。</p>
<p>那么对于某个数字 $l$，在取走 $l$ 之前背包内的数字之和是 $i-l$，数字个数是 $j-1$，因此有状态转移方程</p>
<script type="math/tex; mode=display">f(i,j)=\sum_{l=1}^{n} f(i-l,j-1)</script><p>不过需要注意到，我们计算方案数时，不同的方案需要是本质不同的（何为本质不同？看看题目中的提示）。</p>
<p>该怎么解决呢，如果我们可以让物品都是从小到大（或从大到小）依次放入背包的，就不会出现重复的情况了。所以我们可以在最外层枚举 $l$，这样当我们放入物品 $l$ 时，之前放进去的物品都是不大于 $l$，自然就满足了从小到大放入的限制了。</p>
<p>最终的时间复杂度是 $O(n^2k)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">210</span>;</span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> f[N][<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">1</span>; l &lt;= n; l ++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= n; i ++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= k; j ++)</span><br><span class="line">                f[i][j] += f[i - l][j - <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, f[n][k]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例题：<a href="https://vjudge.net/problem/51Nod-1201">整数划分</a></p>
<p>跟上一题的题目差不多，不过去掉了恰好 $k$ 个的限制，而且要求拆分的每个数字都不相同，这意味着每个数字最多只能出现一次，正好对应了 0-1 背包。</p>
<p>然后很容易想到这么定义状态，令 $f(i)$ 表示组成数字之和为 $i$ 的方案数。对于物品 $l$（即拆分的数字），状态转移方程为</p>
<script type="math/tex; mode=display">f(i)=\sum_{l=1}^{n} f(i-l)</script><p>那么只要像 0-1 背包一样倒着枚举 $l$ 进行状态的转移即可，可惜这个做法的时间复杂度是 $O(n^2)$，因为我们有 $n$ 个物品，背包容量是 $n$，这个做法是无法通过此题的。</p>
<p>我们需要注意到一个性质，首先考虑背包内最多能装多少个物品，这个问题无非就是找到最大的整数 $s$ 满足 $1+2+3+\dots+s\leq n$，不难发现 $s$ 实际上是 $O(\sqrt{n})$ 级别的，也就是说背包内最多也就 $O(\sqrt{n})$ 个物品。</p>
<p>因此我们可以这样定义状态，令 $f(i,j)$ 表示用 $j$ 个数字，数字之和是 $i$ 的方案数。状态和第一题定义的状态是一样的，但是我们不能再像那样子转移了。</p>
<p>如果我们对这 $j$ 个数字都加一，显然仍然满足互不相等的性质；在都加一的基础上，再放入一个新数字 $1$，变成 $j+1$ 个数字，也仍然满足互不相等的性质。不难发现如果对一个初始为空的序列不断执行上述两个操作，它可以变成任何单调递减的序列。</p>
<p>所以我们不妨就根据这两个决策进行转移，得到的状态转移方程为</p>
<script type="math/tex; mode=display">f(i,j)=f(i-j,j)+f(i-j,j-1)</script><p>其中前者表示 $j$ 个元素，每个元素都加一；后者表示 $j-1$ 个元素，每个元素都加一的基础上，再放入一个数字 $1$。</p>
<p>这样就把时间复杂度优化到 $O(n\sqrt{n})$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">50010</span>, MOD = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">int</span> n, f[N][<span class="number">350</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="built_in">min</span>(<span class="number">320</span>, i); j ++) &#123;</span><br><span class="line">            f[i][j] = (f[i][j] + f[i - j][j]) % MOD;</span><br><span class="line">            f[i][j] = (f[i][j] + f[i - j][j - <span class="number">1</span>]) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">320</span>; i ++)</span><br><span class="line">        ans = (ans + f[n][i]) % MOD;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例题：<a href="https://www.luogu.com.cn/problem/U101024">数的划分(数据加强版)</a></p>
<p>题目和第一道例题完全一样，不过数据范围变大了，我们再看看前两题是如何定义状态的：令 $f(i,j)$ 表示用 $j$ 个数字，数字之和是 $i$ 的方案数。在这题虽然并没有数字互不相同的性质，但是根据题目要求我们知道 $j\leq k$，而这道题 $k$ 的范围同样很小，我们可以尝试看看能不能用上一题的思路来解决这题。</p>
<p>首先第一个决策仍然还是可以把 $j$ 个元素都加一；而现在我们不需要保持元素的互不相等，所以第二个操作可以直接放入一个新的数字 $1$ 变成 $j+1$ 个数字。类似地，可以得到状态转移方程</p>
<script type="math/tex; mode=display">f(i,j)=f(i-j,j)+f(i-1,j-1)</script><p>最终时间复杂度就优化到了 $O(nk)$，不过这个题还需要用滚动数组优化空间复杂度，具体看代码。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> K = <span class="number">610</span>, MOD = <span class="number">10086</span>;</span><br><span class="line"><span class="type">int</span> n, k, f[K][K];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= k; j ++) f[i % <span class="number">600</span>][j] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= k; j ++) &#123;</span><br><span class="line">            f[i % <span class="number">600</span>][j] = (f[i % <span class="number">600</span>][j] + f[(i - <span class="number">1</span>) % <span class="number">600</span>][j - <span class="number">1</span>]) % MOD;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= j) f[i % <span class="number">600</span>][j] = (f[i % <span class="number">600</span>][j] + f[(i - j) % <span class="number">600</span>][j]) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, f[n % <span class="number">600</span>][k]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例题：<a href="https://vjudge.net/problem/51Nod-1259">整数划分 V2</a></p>
<p>还是整数划分，不过这题已经没有任何限制了：不需要数字互不相同，也不需要恰好 $k$ 个数字的限制。</p>
<p>这道题的处理是比较巧妙的，我们把问题分成两个子问题分开处理：</p>
<ul>
<li><p>用 $1,2,\dots,\sqrt{n}-1$ 这些数字组成 $n$ 的方案数</p>
<p>  直接用类似完全背包的朴素做法，定义 $f(j)$ 表示数字之和为 $j$ 的方案数，然后利用转移方程 $f(j)=\sum_{l=1}^{\sqrt{n}-1} f(j-l)$ 进行转移即可，这部分的时间复杂度为 $O(n\sqrt{n})$。</p>
</li>
<li><p>用 $\sqrt{n},\sqrt{n}+1,\dots,n$ 这些数字组成 $n$ 的方案数</p>
<p>  此时最小的数字都有 $\sqrt{n}$，所以背包内不可能有超过 $\sqrt{n}$ 个数字，那么老样子，定义 $g(i,j)$ 表示用 $j$ 个数字，数字之和为 $i$ 的方案数，转移方程与上一题类似，只不过第二个决策中我们不再是放入数字 $1$，而是数字 $\sqrt{n}$，因此转移方程为 $g(i,j)=g(i-j,j)+g(i-\sqrt{n},j-1)$。</p>
<p>  然后令 $h(i)=\sum_{j=0}^{\sqrt{n}} g(i,j)$，那么 $h(i)$ 就是这一部分的答案，时间复杂度为 $O(n\sqrt{n})$。</p>
</li>
</ul>
<p>最后，我们不妨假设原问题的数字 $n$ 中有 $i$ 是由第一个子部分组成，剩下 $n-i$ 是由第二个子部分组成。那么枚举 $i$，每次把两者的方案数相乘，所有乘积的和就是原问题的答案了，时间复杂度为 $O(n\sqrt{n})$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">50010</span>, MOD = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">int</span> n, f[N], g[N][<span class="number">350</span>], h[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">320</span>; i ++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt;= n; j ++)</span><br><span class="line">            f[j] = (f[j] + f[j - i]) % MOD;</span><br><span class="line">    g[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">320</span>; j ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= j) g[i][j] = (g[i][j] + g[i - j][j]) % MOD;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= <span class="number">320</span>) g[i][j] = (g[i][j] + g[i - <span class="number">320</span>][j - <span class="number">1</span>]) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">320</span>; j ++)</span><br><span class="line">            h[i] = (h[i] + g[i][j]) % MOD;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i ++)</span><br><span class="line">        ans = (ans + <span class="number">1ll</span> * f[i] * h[n - i] % MOD) % MOD;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="斜率优化-DP"><a href="#斜率优化-DP" class="headerlink" title="斜率优化 DP"></a>斜率优化 DP</h2><p>斜率优化 DP 会把状态转移时的每一个决策点进行一步转化，将其抽象成二维平面上的若干个点，然后经过这些点画一条斜率相同的直线，找到这些直线所对应的截距的最值。</p>
<p>由于直线斜率在决策时是常量，所以这类问题通常会转化成对二维平面上的凸包的维护，根据题目的不同，利用二分/单调队列/平衡树等技巧在凸包上找到最佳决策点。</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/P3195">[HNOI2008] 玩具装箱</a></p>
<p>对于这个题，首先不难想到一个时间复杂度为 $O(n^2)$ 的思路，定义状态 $f(i)$ 表示将前 $i$ 个物品分成若干段的最小代价，然后我们枚举前面的某个物品 $j$，考虑如果将 $[j+1,i]$ 区间内的物品合并时的状态转移为</p>
<script type="math/tex; mode=display">
\begin{align*}
f(i)&=\min_{j<i} \{f(j)+(x-L)^2\}\\
&=\min_{j<i} \{f(j)+(i-(j+1)+\sum_{k=j+1}^{i}{C_k}-L)^2\}\\
&=\min_{j<i} \{f(j)+(i-(j+1)+sum_i-sum_j-L)^2\}\\
&=\min_{j<i} \{f(j)+((i+sum_i)-(j+sum_j)-(L+1))^2\}
\end{align*}</script><p>其中 $sum_i$ 是 $C_i$ 数组的前缀和，此时我们可以直接枚举 $j$ 来求得 $f(i)$ 的最小值，下面考虑如何快速找到这个决策点 $j$。</p>
<p>然后为了简化式子，我们令 $s_i=i+sum_i,L’=L+1$，于是有</p>
<script type="math/tex; mode=display">
\begin{align*}
f(i)&=\min_{j<i} \{f(j)+(s_i-s_j-L')^2\}\\
&=\min_{j<i} \{f(j)+((s_i-L')-s_j)^2\}\\
&=\min_{j<i} \{f(j)+(s_i-L')^2+{s_j}^2-2(s_i-L')s_j\}
\end{align*}</script><p>因为 $(s_i-L’)^2$ 与 $j$ 无关，可以看作常量，所以将其提出来得到</p>
<script type="math/tex; mode=display">f(i)-(s_i-L')^2=\min_{j<i} \{f(j)+{s_j}^2-2(s_i-L')s_j\}</script><p>进一步简化式子，我们令</p>
<script type="math/tex; mode=display">
\begin{align*}
x_j&=s_j\\
y_j&=f(j)+{s_j}^2\\
k_i&=2(s_i-L')\\
b_i&=f(i)-(s_i-L')^2
\end{align*}</script><p>于是就有</p>
<script type="math/tex; mode=display">b_i=\min_{j<i} \{y_j-k_ix_i\}</script><p>即我们想让 $f(i)$ 最小，意味着要让 $b_i$ 取到最小值。考虑一次函数的斜截式 $y=kx+b$，这正好跟我们上面的式子对应。所以我们可以把问题转换成：找到某一个二维平面上的点 $(x_j,y_j)$，通过这个点画一条斜率为 $k_i$ 的直线，使得截距 $b_i$ 取到最小值。</p>
<p>我们把所有可能的点都画在平面上，不难发现只有最下面若干个构成凸包的点是有用的。同时由于在决策时 $k_i$ 是常量，因此我们要找到一个点 $(x_j,y_j)$，使得这个点与其凸包右侧的点所构成的斜率恰好大于 $k_i$，这样才能使 $b_i$ 最小（可以画个图理解一下）。</p>
<p>由于凸壳上从左到右相邻两点的斜率递增，而且在本题中 $x_i$ 是随着 $i$ 的增大而增大，所以我们可以用单调队列来维护这个凸壳。</p>
<p>具体来说，在寻找决策点 $j$ 时，判断队首两点的斜率是否大于 $k_i$，若不是，则不断弹出队首直到满足条件，最后队首就是决策点。然后在求完 $f(i)$ 之后，我们也要将 $(x_i,y_i)$ 这个新点从队尾放入队列，同样地也是判断队尾两个点与这个新点所构成的斜率的关系，最后保证加入新点之后队列中的点仍然是个凸壳。</p>
<p>这样我们就把每次决策的时间复杂度优化到 $O(1)$，因此总的时间复杂度就是 $O(n)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">50010</span>;</span><br><span class="line"><span class="type">int</span> n, q[N], h, t;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> L, s[N], sum[N], f[N];</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">X</span> <span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">Y</span> <span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f[i] + s[i] * s[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>, &amp;n, &amp;L);</span><br><span class="line">    L ++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;sum[i]);</span><br><span class="line">        sum[i] += sum[i - <span class="number">1</span>];</span><br><span class="line">        s[i] = sum[i] + i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ki = <span class="number">2ll</span> * (s[i] - L);</span><br><span class="line">        <span class="keyword">while</span> (h &lt; t &amp;&amp; (<span class="built_in">Y</span>(q[h + <span class="number">1</span>]) - <span class="built_in">Y</span>(q[h])) &lt;= ki * (<span class="built_in">X</span>(q[h + <span class="number">1</span>]) - <span class="built_in">X</span>(q[h]))) h ++;</span><br><span class="line">        f[i] = f[q[h]] + (s[i] - s[q[h]] - L) * (s[i] - s[q[h]] - L);</span><br><span class="line">        <span class="keyword">while</span> (h &lt; t &amp;&amp; (<span class="built_in">Y</span>(i) - <span class="built_in">Y</span>(q[t])) * (<span class="built_in">X</span>(i) - <span class="built_in">X</span>(q[t - <span class="number">1</span>])) &lt;= (<span class="built_in">Y</span>(i) - <span class="built_in">Y</span>(q[t - <span class="number">1</span>])) * (<span class="built_in">X</span>(i) - <span class="built_in">X</span>(q[t]))) t --;</span><br><span class="line">        q[++ t] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, f[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>教学</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>number-theory-basic</title>
    <url>/number-theory-basic/</url>
    <content><![CDATA[<h1 id="数论基础"><a href="#数论基础" class="headerlink" title="数论基础"></a>数论基础</h1><h2 id="质数"><a href="#质数" class="headerlink" title="质数"></a>质数</h2><p>在大于 $1$ 的正整数中，若其除了 $1$ 和本身之外没有其他约数，则称这个数为质数，否则就是合数。</p>
<h2 id="质因数分解"><a href="#质因数分解" class="headerlink" title="质因数分解"></a>质因数分解</h2><p>设正整数 $a$，那么必有表示</p>
<script type="math/tex; mode=display">a = {p_1}^{\alpha_1} {p_2}^{\alpha_2} \cdots {p_s}^{\alpha_s}, p_1 < p_2 < \dots < p_s</script><p>其中 $p_i (1 \leq i \leq s)$ 是质数。</p>
<p>那么当给定一个正整数 $a$，如何能够将其质因数分解呢？</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= a; i ++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(a % i)) &#123;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!(a % i)) &#123;</span><br><span class="line">            a /= i;</span><br><span class="line">            cnt ++;</span><br><span class="line">        &#125;</span><br><span class="line">        v.<span class="built_in">push_back</span>(&#123;i, cnt&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先很容易可以想到一个暴力做法：因为质因子肯定不会超过 $a$，那么从 $2$ 枚举到 $a$，对于每个数都用 $a$ 去尝试能否整除即可。</p>
<p>但是仔细想想，其实我们的枚举范围可以缩小，只需要从 $2$ 枚举到 $\sqrt{a}$ 即可。因为不难发现，如果存在一个质数 $p_i \mid a, p_i &gt; \sqrt{a}$，那么这样的质数至多只有一个，且其指数 $\alpha_i$ 至多为 $1$。因此当我们把其他较小的质因子都枚举完之后，剩下的那个大质因子也就直接能找到了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= a; i ++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(a % i)) &#123;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!(a % i)) &#123;</span><br><span class="line">            a /= i;</span><br><span class="line">            cnt ++;</span><br><span class="line">        &#125;</span><br><span class="line">        v.<span class="built_in">push_back</span>(&#123;i, cnt&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a != <span class="number">1</span>) v.<span class="built_in">push_back</span>(&#123;a, <span class="number">1</span>&#125;);</span><br></pre></td></tr></table></figure>
<p>例题：<a href="https://codeforces.com/contest/1445/problem/C">Codeforces 1445C</a></p>
<p>题意：$t$ 组询问，每次询问给出两个数 $p, q$，你需要找到最大的数 $x$ 满足 $x \mid p, q \nmid x$。</p>
<p>如果只看第一个条件，显然直接令 $x$ 为 $p$ 即可，此时如果 $q \nmid p$，那答案直接就是 $p$，所以下面我们只讨论当 $q \mid p$ 的情况。</p>
<p>然后我们考虑如何让 $x$ 变小使得其恰好满足第二个条件，注意到 $q \leq 10^9$，我们不妨对其质因数分解，显然 $q$ 的质因子也是 $p$ 的质因子，那我们不妨让 $p$ 不断除以这个质因子直到 $q \nmid p$，这样就得到一个满足两个条件的数了。</p>
<p>最后对于每个质因子都这么操作一遍，最大的那个数就是答案了。后半部分操作的时间复杂度是对数级别的，因此复杂度的瓶颈就是质因数分解，即 $O(t\sqrt{q})$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> p, q;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; v;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">breakdown</span> <span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(n % i)) &#123;</span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (!(n % i)) &#123;</span><br><span class="line">                n /= i;</span><br><span class="line">                cnt ++;</span><br><span class="line">            &#125;</span><br><span class="line">            v.<span class="built_in">push_back</span>(&#123;i, cnt&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n != <span class="number">1</span>) v.<span class="built_in">push_back</span>(&#123;n, <span class="number">1</span>&#125;);    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;p, &amp;q);</span><br><span class="line">    v.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="built_in">breakdown</span>(q);</span><br><span class="line">    <span class="keyword">if</span> (!(p % q)) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>, x;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i : v) &#123;</span><br><span class="line">            x = p;</span><br><span class="line">            <span class="keyword">while</span> (!(x % q)) x /= i.first;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t --) <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="质数筛"><a href="#质数筛" class="headerlink" title="质数筛"></a>质数筛</h2><p>如果我们想要知道小于等于 $n$ 的质数一共有那些，有什么比较好的办法呢？</p>
<p>刚刚我们学了质因数分解，如果一个数质因数分解后是其分身（$1$ 除外），这个数便是质数。但是如果对 $n$ 个数都质因数分解一遍，时间复杂度是 $O(n\sqrt{n})$，并不是很高效。</p>
<p>换个思路，如果找出了 $n$ 以内的所有合数，剩下的自然就是质数了。想想合数有什么性质？如果 $a$ 是合数，那么一定存在 $b(1 &lt; b &lt; a)$ 和 $k(k \in \mathbb{Z}^+)$ 满足 $a = k b$。那么我们不妨从 $2$ 枚举到 $n$，对于每个数 $i$，其除了自身以外的其他倍数 $j=ki$ 一定是合数，同时如果 $i$ 并非之前某个数的倍数，那么 $i$ 就是质数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> pri[N], cnt;</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sieve</span> <span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) pri[++ cnt] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">2</span> * i; j &lt;= n; j += i)</span><br><span class="line">            vis[j] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方法看起来很暴力，但是实际上它的时间复杂度比上一个更有，是 $O(n\log{n})$。如何分析它的时间复杂度呢？首先需要告诉你们一个结论</p>
<script type="math/tex; mode=display">O\left( \sum_{i=1}^n {\frac{1}{i}} \right) \sim O(\log{n})</script><p>因此这段代码的时间复杂度就是 $O\left( \sum_{i=1}^n {\dfrac{n}{i}} \right) = O(n\log{n})$。</p>
<p>但是这个算法还是不够高效，对于一个合数，它会被其若干个约数都筛一遍，那么有没有什么办法能省掉这些无意义的步骤呢？</p>
<p>我们只需要让每一个合数都会且仅会被其恰好一个约数筛掉即可，这样就得到了一个线性筛质数的算法。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> pri[N], cnt;</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sieve</span> <span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) pri[++ cnt] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; pri[j] &lt;= n / i; j ++) &#123;</span><br><span class="line">            vis[i * pri[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (!(i % pri[j])) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为什么这样就可以让每个合数只被恰好一个约数筛掉呢？考虑一个合数 $a = {p_1}^{\alpha_1} \cdots {p_i}^{\alpha_i} \cdots {p_s}^{\alpha_s}$，它只会被约数 $b = {p_1}^{\alpha_1 - 1} \cdots {p_i}^{\alpha_i} \cdots {p_s}^{\alpha_s}$ 筛掉，即某个数乘上 $a$ 的最小质因子 $p_1$。那么为什么不能是 $c = {p_1}^{\alpha_1} \cdots {p_i}^{\alpha_i - 1} \cdots {p_s}^{\alpha_s}$ 呢？注意看内层循环 <code>break</code> 的位置，当循环到 $i$ 的某个质因子时循环会退出，又因为我们是从小到大枚举质数，因此这个质因子就是 $i$ 的最小质因子，所以绝对不可能出现由 $c p_i$ 而筛到 $a$ 的情况发生。而因为每个合数都只会被恰好筛一次，因此这个算法的时间复杂度是 $O(n)$。</p>
<p>注意线性筛求质数的同时也求出了每个数的最小质因子。</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/P3383">【模板】线性筛素数</a></p>
<p>把 $n$ 以内的质数筛出来，然后对于每次询问直接输出结果即可，时间复杂度 $O(n)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100000010</span>;</span><br><span class="line"><span class="type">int</span> n, q, pri[N], cnt;</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sieve</span> <span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) pri[++ cnt] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; pri[j] &lt;= n / i; j ++) &#123;</span><br><span class="line">            vis[i * pri[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (!(i % pri[j])) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;q);</span><br><span class="line">    <span class="built_in">sieve</span>(n);</span><br><span class="line">    <span class="keyword">while</span> (q --) &#123;</span><br><span class="line">        <span class="type">int</span> k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pri[k]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例题：<a href="https://www.luogu.com.cn/problem/P1835">素数密度</a></p>
<p>注意到 $L, R$ 很大，肯定是不能直接去质数筛的，同样地，我们可以先找出 $[L, R]$ 之间的合数，剩下的就是质数了。</p>
<p>对于合数 $a$，其实在质因数分解的时候就可以发现，其最小质因子 $p$ 一定满足 $p &lt; \sqrt{a}$，所以我们不妨先筛出 $\sqrt{R}$ 以内的质数，用线性筛可以达到 $O(\sqrt{R})$ 的时间复杂度，然后用这些质数去筛出 $[L, R]$ 之间的合数。</p>
<p>具体怎么筛呢？想想我们刚刚提到的第一种质数筛法，我们先枚举这些质数，然后再枚举它们在 $[L, R]$ 之间的倍数即可，这部分的时间复杂度是 $O((R - L) \log{\sqrt{R}})$。</p>
<p>需要注意一下这个题有点坑，小心爆 <code>int</code>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> pri[N], cnt, L, R;</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sieve</span> <span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) pri[++ cnt] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; pri[j] &lt;= n / i; j ++) &#123;</span><br><span class="line">            vis[i * pri[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (!(i % pri[j])) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sieve</span>(<span class="number">50000</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;L, &amp;R);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> i = L; i &lt;= R; i ++) vis[i - L] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (L == <span class="number">1</span>) vis[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt; i ++) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> x = (<span class="number">0ll</span> + L + pri[i] - <span class="number">1</span>) / pri[i] * pri[i];</span><br><span class="line">        <span class="keyword">if</span> (x == pri[i]) x += pri[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> j = x; j &lt;= R; j += pri[i]) vis[j - L] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> i = L; i &lt;= R; i ++) ans += !(vis[i - L]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="质数密度"><a href="#质数密度" class="headerlink" title="质数密度"></a>质数密度</h2><p>质数计数函数：小于等于 $x$ 的质数个数用 $\pi(x)$ 表示。</p>
<p>随着 $x$ 的增大，有这样的近似结果</p>
<script type="math/tex; mode=display">\pi(x) \sim \frac{x}{\ln{x}}</script><p>这个结论可以帮我们小小地优化质因数分解的时间复杂度，即在最开始先通过质数筛找出质数，然后我们就不需要再从 $2$ 到 $\sqrt{a}$ 全部枚举了，而是只枚举 $[2, \sqrt{a}]$ 的所有质数，这样就把时间复杂度从 $O(\sqrt{a})$ 降到 $O(\dfrac{\sqrt{a}}{\ln{\sqrt{a}}})$。</p>
<h2 id="反质数"><a href="#反质数" class="headerlink" title="反质数"></a>反质数</h2><p>质数是因子只有两个的数，而反质数，就是因子数量最多的数。具体来说，对于一个正整数 $x$，如果所有比它小的正整数的因子数量都比 $x$ 的因子数量少，那么 $x$ 就是反质数。</p>
<p>那么如何求解反质数呢？若正整数 $a$ 是反质数，我们将其质因数分解成 $a={p_1}^{\alpha_1}{p_2}^{\alpha_2}\cdots {p_s}^{\alpha_s}$，这样我们就可以计算其总因子个数是 $(\alpha_1+1)\times(\alpha_2+1)\times\cdots\times(\alpha_s+1)$。（思考一下为什么？）</p>
<p>根据反质数的定义，我们可以分析出其具有以下特点：</p>
<ol>
<li>其质因子肯定是从 $2,3,5\dots$ 开始的连续质数，否则我可以找到更小的质数替换其质因子，$a$ 的值会更小。</li>
<li>质因子的指数满足如下关系：$\alpha_1\geq\alpha_2\geq\dots\geq\alpha_s$，否则对于不满足该关系的质因子的指数，直接交换其质因子，则 $a$ 的值更小且因子数量不变。</li>
</ol>
<p>之后我们就可以根据这两条性质进行搜索剪枝，实践证明有了这两条性质的优化，即使数据范围很大也可以很快地求出答案。</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/P1463">[POI2001] [HAOI2007] 反素数</a></p>
<p>题意很明确，就是要我们求 $n$ 以内的最大反质数。那么根据第一条性质，我们先提前列出最小的前几个质数，在这道题的数据范围下只需要十个就足够了。然后我们便开始搜索这些质数的指数，在搜索的过程中记录已经构成了多大的数（因为要确保不能超过 $n$），这个数的因子数量是多少（用于更新答案），同时还需要维护第二条性质，即确保指数是不增排序的。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, maxn, ans, pri[<span class="number">15</span>] = &#123;<span class="number">2</span>,  <span class="number">3</span>,  <span class="number">5</span>,  <span class="number">7</span>,  <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span> <span class="params">(<span class="type">int</span> dep, <span class="type">long</span> <span class="type">long</span> a, <span class="type">int</span> g, <span class="type">int</span> lim)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep &gt; <span class="number">9</span> || a &gt; n) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (g &gt; maxn) &#123;</span><br><span class="line">        maxn = g;</span><br><span class="line">        ans = a;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (g == maxn)</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, (<span class="type">int</span>)a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= lim; i ++) &#123;</span><br><span class="line">        a *= pri[dep];</span><br><span class="line">        <span class="keyword">if</span> (a &gt; n) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(dep + <span class="number">1</span>, a, g * (i + <span class="number">1</span>), i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">31</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例题：<a href="https://codeforces.com/contest/27/problem/E">Codeforces 27E</a></p>
<p>题意：找到因子数量恰好为 $n$ 的最小正整数。</p>
<p>与上一题基本相同的框架，由于数据范围更大，所以我们首先需要列出更多的质数（16个即可），然后根据题目所求目标的不同稍微进行修改即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, pri[<span class="number">16</span>] = &#123;<span class="number">2</span>,  <span class="number">3</span>,  <span class="number">5</span>,  <span class="number">7</span>,  <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>&#125;;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span> <span class="params">(<span class="type">int</span> dep, <span class="type">long</span> <span class="type">long</span> a, <span class="type">int</span> g, <span class="type">int</span> lim)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep &gt; <span class="number">15</span> || a &gt; ans || g &gt; n) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (g == n) ans = <span class="built_in">min</span>(ans, a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= lim; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a &gt; ans / pri[dep]) <span class="keyword">return</span>;</span><br><span class="line">        a *= pri[dep];</span><br><span class="line">        <span class="built_in">dfs</span>(dep + <span class="number">1</span>, a, g * (i + <span class="number">1</span>), i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    ans = <span class="number">1e18</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">60</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h2><p>一组整数的公约数，是指同时是这组数中每一个数的约数的数，而一组整数的最大公约数，是指所有公约数里面最大的一个。</p>
<p>对不全为零的整数 $a, b$，将其最大公约数记为 $\gcd(a, b)$。类似地，对不全为零的整数 $a_1, \dots, a_n$，将其最大公约数记为 $\gcd(a_1, \dots, a_n)$。</p>
<p>特殊地，我们定义 $\gcd(a, 0) = a$。</p>
<h2 id="欧几里得算法"><a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h2><p>给出两个整数 $a, b$（不妨令 $a &gt; b$），我们该怎么快速求出它们的最大公约数呢？</p>
<p>我们可以通过证明得到 $\gcd(a, b) = \gcd(b, a \bmod b)$，证明过程如下：</p>
<ul>
<li><p>首先证明 $a, b$ 的公约数是 $b, a \bmod b$ 的公约数：</p>
<p>  设 $a = kb + c, c = a \bmod b$，对于约数 $d$ 满足 $d \mid a, d \mid b$。显然有 $c = a - kb$，把等式两边都除以 $d$ 得到 $\dfrac{c}{d} = \dfrac{a}{d} - k\dfrac{b}{d}$，右式仍然是整数，即 $d \mid c$，得证。</p>
</li>
<li><p>然后证明 $b, a \bmod b$ 的公约数是 $a, b$ 的公约数：</p>
<p>  同样地，对于约数 $d$ 满足 $d \mid b, d \mid c$。显然有 $a = kb + c$，把等式两边都除以 $d$ 得到 $\dfrac{a}{d} = k\dfrac{b}{d} + \dfrac{c}{d}$，右式仍然是整数，即 $d \mid a$，得证。</p>
</li>
<li><p>因为两式的公约数都相同，因此最大公约数也相同，得证。</p>
</li>
</ul>
<p>那么，我们就可以不停地递归，直到两者其中一个变成零，此时另一个非零整数就是最大公约数了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span> <span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (!b) ? a : <span class="built_in">gcd</span>(b, a % b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们考虑如何分析这个算法的时间复杂度：</p>
<ul>
<li><p>若 $a &lt; b$，$\gcd(a, b) = \gcd(b, a)$；</p>
</li>
<li><p>若 $a &gt;= b$，$\gcd(a, b) = \gcd(b, a \bmod b)$，此时 $a$ 会至少减半；</p>
<p>  因为第一种情况发生后紧接着一定会发生第二种情况，因此第一种情况不会多于第二种情况。又因为第二种情况最多发生 $O(\log a)$ 次，因此算法的时间复杂度就是 $O(\log \max(a, b))$。</p>
</li>
</ul>
<h2 id="多个数的最大公约数"><a href="#多个数的最大公约数" class="headerlink" title="多个数的最大公约数"></a>多个数的最大公约数</h2><p>每次取出两个数，求出它们的最大公约数再放回去，对答案并不会有影响，即</p>
<script type="math/tex; mode=display">\gcd(a_1, a_2, \dots, a_n) = \gcd(\gcd(a_1, a_2), \dots, a_n)</script><h2 id="最小公倍数"><a href="#最小公倍数" class="headerlink" title="最小公倍数"></a>最小公倍数</h2><p>一组整数的公倍数，是指同时是这组数中每一个数的倍数的数，而一组整数的最小公倍数，是指所有正的公倍数里面最小的一个。</p>
<p>对整数 $a, b$，将其最小公倍数记为 $\text{lcm}(a, b)$。类似地，对整数 $a_1, \dots, a_n$，将其最小公倍数记为 $\text{lcm}(a_1, \dots, a_n)$。</p>
<p>设 $a = p_1^{k_{a_1}} p_2^{k_{a_2}} \cdots p_s^{k_{a_s}}, b = p_1^{k_{b_1}} p_2^{k_{b_2}} \cdots p_s^{k_{b_s}}$，实际上，两者的最大公约数等于</p>
<script type="math/tex; mode=display">p_1^{\min(k_{a_1}, k_{b_1})} p_2^{\min(k_{a_2}, k_{b_2})} \cdots p_s^{\min(k_{a_s}, k_{b_s})}</script><p>而两者的最小公倍数等于</p>
<script type="math/tex; mode=display">p_1^{\max(k_{a_1}, k_{b_1})} p_2^{\max(k_{a_2}, k_{b_2})} \cdots p_s^{\max(k_{a_s}, k_{b_s})}</script><p>又因为 $k_a + k_b = \max(k_a, k_b) + \min(k_a, k_b)$，所以可以得到 $ab = \gcd(a, b) \text{lcm}(a, b)$，即 $\text{lcm}(a, b) = \dfrac{ab}{\gcd(a, b)}$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lcm</span> <span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a / <span class="built_in">gcd</span>(a, b) * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="多个数的最小公倍数"><a href="#多个数的最小公倍数" class="headerlink" title="多个数的最小公倍数"></a>多个数的最小公倍数</h2><p>同样地，我们有：</p>
<script type="math/tex; mode=display">\text{lcm}(a_1, a_2, \dots, a_n) = \text{lcm}(\text{lcm}(a_1, a_2), \dots, a_n)</script><p>例题：<a href="https://www.luogu.com.cn/problem/P1072">Hankson 的趣味题</a></p>
<p>题意：$n$ 组询问，每次询问给出四个正整数 $a_0, a_1, b_0, b_1$，求有多少个正整数 $x$ 满足 $\gcd(x, a_0)=a_1, \text{lcm}(x, b_0) = b_1$。</p>
<p>显然 $x$ 一定是 $b_1$ 的约数，我们可以在 $O(\sqrt{b_1})$ 的时间复杂度内去枚举 $b_1$ 的所有约数，然后对每个约数都检查一下是否满足两个条件即可，最终时间复杂度是 $O(n\sqrt{b_1})$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a0, a1, b0, b1;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">gcd</span> <span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (!b) ? a : <span class="built_in">gcd</span>(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">lcm</span> <span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a / <span class="built_in">gcd</span>(a, b) * b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;a0, &amp;a1, &amp;b0, &amp;b1);</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; <span class="number">1ll</span> * i * i &lt;= b1; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b1 % i) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">gcd</span>(i, a0) == a1 &amp;&amp; <span class="built_in">lcm</span>(i, b0) == b1) ans ++;</span><br><span class="line">        <span class="keyword">if</span> (b1 / i == i) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">gcd</span>(b1 / i, a0) == a1 &amp;&amp; <span class="built_in">lcm</span>(b1 / i, b0) == b1) ans ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t --) <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例题：<a href="https://www.luogu.com.cn/problem/P1414">又是毕业季II</a></p>
<p>我们不妨令 $cnt_i$ 表示数字 $i$ 的倍数在给出的 $n$ 个数中有 $cnt_i$ 个，那么如果说 $i$ 可以是其中某 $k$ 个数的公因子，自然有 $cnt_i\geq k$。而枚举每个数字，然后再枚举其所有因子就可以很容易计算 $cnt$ 数组的值。</p>
<p>对于每一个 $k$，从大到小找到最大的整数 $i’$ 使得 $cnt_{i’}\geq k$，$i’$ 就是最大公因数。不难发现随着 $k$ 增大，答案是不增的，所以将值域从大到小扫一遍就可以求出所有答案，时间复杂度 $O(n\sqrt{inf})$。</p>
<h2 id="裴蜀定理"><a href="#裴蜀定理" class="headerlink" title="裴蜀定理"></a>裴蜀定理</h2><p>设 $a, b$ 是不全为零的整数，对任意整数 $x, y$，满足 $\gcd(a,b)\mid ax+by$，且存在整数 $x,y$, 使得 $ax+by=\gcd(a,b)$。证明如下：</p>
<ul>
<li><p>对任意整数 $x, y$，满足 $\gcd(a,b)\mid ax+by$：</p>
<p>  由于 $\gcd(a,b)\mid a,\gcd(a,b)\mid b$，所以 $\gcd(a,b)\mid ax,\gcd(a,b)\mid by$，其中 $x,y$ 均为整数。</p>
<p>  因此 $\gcd(a,b)\mid ax+by$。</p>
</li>
<li><p>存在整数 $x,y$, 使得 $ax+by=\gcd(a,b)$：</p>
<p>  若 $a,b$ 中存在 $0$，不妨令 $b=0$，那么显然有 $a=\gcd(a, b)$。</p>
<p>  若 $a,b$ 都不是 $0$，不妨令 $a\geq b&gt;0$，将等式两边都除以 $\gcd(a,b)$ 得到 $a_1x+b_1y=1$，其中 $\gcd(a_1,b_1)=1$，因此下面需要证明 $a_1x+b_1y=1$。</p>
<p>  考虑欧几里得算法，我们把每次 $a\bmod b$ 的值记为 $r$，那么可以得到</p>
<script type="math/tex; mode=display">\gcd(a_1,b_1)=\gcd(b_1,r_1)=\gcd(r_1,r_2)=\cdots=\gcd(r_{n-1},r_n)=\gcd(r_n,0)=1</script><p>  将取模运算展开，可以得到</p>
<script type="math/tex; mode=display">\begin{aligned}a_1 &= q_1b_1+r_1 \\ b_1 &= q_2r_1+r_2 \\ r_1 &= q_3r_2+r_3 \\ &\cdots \\ r_{n-3} &= q_{n-1}r_{n-2}+r_{n-1} \\ r_{n-2} &= q_nr_{n-1}+r_n \\ r_{n-1} &= q_{n+1}r_n\end{aligned}</script><p>  我们知道在算法结束时必然有 $r_n=1$，所以有</p>
<script type="math/tex; mode=display">r_{n-2}=q_nr_{n-1}+1</script><p>  即</p>
<script type="math/tex; mode=display">1=r_{n-2}-q_nr_{n-1}</script><p>  由倒数第三个式子 $r_{n-1}=r_{n-3}-q_{n-1}r_{n-2}$ 代入上式可以得到：</p>
<script type="math/tex; mode=display">1=(1+q_nq_{n-1})r_{n-2}-q_nr_{n-3}</script><p>  用同样的方法我们可以逐个消去 $r_{n-2},\cdots,r_1$，最后只剩下 $a_1,b_1$，即证明 $a_1x+b_1y=1$。</p>
<p>  从而证明 $ax+by=\gcd(a,b)$。</p>
</li>
</ul>
<p>裴蜀定理可以推广到 $n$ 个整数的情况：设 $a_1,a_2,\dots,a_n$ 是不全为零的整数，则存在整数 $x_1,x_2,\dots,x_n$, 使得 $a_1 x_1 + a_2 x_2 + \cdots + a_n x_n=\gcd(a_1, a_2, \dots, a_n)$。</p>
<h2 id="裴蜀定理逆定理"><a href="#裴蜀定理逆定理" class="headerlink" title="裴蜀定理逆定理"></a>裴蜀定理逆定理</h2><p>设 $a,b$ 是不全为零的整数，若 $d&gt;0$ 是 $a,b$ 的公约数，且存在整数 $x,y$，使得 $ax+by=d$，则 $d=\gcd(a,b)$。</p>
<p>特殊地，设 $a,b$ 是不全为零的整数，若存在整数 $x,y$，使得 $ax+by=1$，则 $a,b$ 互质，即 $\gcd(a,b)=1$。</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/P4549">【模板】裴蜀定理</a></p>
<p>裴蜀定理推广到 $n$ 个数的情况，直接求所有数的最大公约数即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, ans;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">gcd</span> <span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (!b) ? a : <span class="built_in">gcd</span>(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">        a = <span class="built_in">abs</span>(a);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>) ans = a;</span><br><span class="line">        <span class="keyword">else</span> ans = <span class="built_in">gcd</span>(ans, a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h2><p>拓展欧几里得算法可以帮助我们解出方程 $ax+by=\gcd(a,b)$ 的一组整数解 $x_0,y_0$。</p>
<p>不妨假设 $ax_1+by_1=\gcd(a,b),bx_2+(a\bmod b)y_2=\gcd(b,a\bmod b)$，在欧几里得算法部分我们已经证明了 $\gcd(a,b)=\gcd(b,a\bmod b)$，所以可以得到</p>
<script type="math/tex; mode=display">ax_1+by_1=bx_2+(a\bmod b)y_2</script><p>由于 $a\bmod b=a-\lfloor \dfrac{a}{b}\rfloor\times b$，将其带入上式得到</p>
<script type="math/tex; mode=display">
\begin{aligned}
ax_1+by_1&=bx_2+(a-\lfloor \frac{a}{b}\rfloor\times b)y_2\\
&=bx_2+ay_2-\lfloor \frac{a}{b}\rfloor\times by_2\\
&=ay_2+b(x_2-\lfloor \frac{a}{b}\rfloor\times y_2)
\end{aligned}</script><p>因此我们不难得到</p>
<script type="math/tex; mode=display">
\begin{aligned}
x_1&=y_2\\
y_1&=x_2-\lfloor \frac{a}{b}\rfloor\times y_2
\end{aligned}</script><p>那么当欧几里得算法递归至 $b=0$ 时，我们不难得到一组 $x=1,y=0$ 的解，然后再根据上述式子一层一层迭代上去就能得到 $x_0,y_0$。</p>
<p>不难发现其实这个方程是有无数个整数解的，那么我们如何用一个解推出其他解呢？考虑对 $x_0,y_0$ 进行一个 $x’,y’(0&lt;x’,y’)$ 的偏移，保持偏移后等式仍然成立，那么有</p>
<script type="math/tex; mode=display">a(x_0+x')+b(y_0-y')=\gcd(a,b)</script><p>然后可以推出 $ax’=by’$，显然我们可以令 $x’=b,y’=a$。那么如何才能让偏移量最小呢，不难想到可以令它们同时除以 $\gcd(a,b)$，因此得到最小偏移量</p>
<script type="math/tex; mode=display">
\begin{aligned}
x'&=\frac{b}{\gcd(a,b)}\\
y'&=\frac{a}{\gcd(a,b)}
\end{aligned}</script><p>因此只需要让 $x_0,y_0$ 同时进行 $\dfrac{b}{\gcd(a,b)},\dfrac{a}{\gcd(a,b)}$ 的偏移（一正一负），就可以由此遍历出其他整数解了。</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/P1082">[NOIP2012 提高组] 同余方程</a></p>
<p>因为 $ax\equiv 1(\bmod b)$，所以存在 $y$ 满足 $ax+by=1$。因为题目保证一定有解，所以根据裴蜀定理的逆定理我们知道 $a,b$ 互质，即 $\gcd(a,b)=1$，代入等式得到 $ax+by=\gcd(a,b)$，可以用拓展欧几里得算法解出一个整数解 $(x_0,y_0)$。</p>
<p>但是答案需要 $x_0$ 是最小正整数，因此我们只需要对 $x_0$ 进行若干次 $\dfrac{b}{\gcd(a,b)}=b$ 的偏移，使其变成最小正整数即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a, b;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">exgcd</span> <span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span> &amp;x, <span class="type">long</span> <span class="type">long</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b) &#123;</span><br><span class="line">        x = <span class="number">1</span>;</span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> g = <span class="built_in">exgcd</span>(b, a % b, x, y), t;</span><br><span class="line">    t = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = t - (a / b) * y;</span><br><span class="line">    <span class="keyword">return</span> g;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> x, y;</span><br><span class="line">    <span class="built_in">exgcd</span>(a, b, x, y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ((x % b) + b) % b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例题：<a href="https://www.luogu.com.cn/problem/P5656">【模板】二元一次不定方程 (exgcd)</a></p>
<p>根据裴蜀定理的逆定理，不难推出当 $\gcd(a,b)\nmid c$，方程无解。</p>
<p>否则，我们用拓展欧几里得定理可以很快求出一组整数解满足 $ax_0+by_0=\gcd(a,b)$，然后将 $x_0,y_0$ 同时乘以 $\dfrac{c}{\gcd(a,b)}$ 就可以得到原方程的解 $x_1,y_1$ 了。</p>
<p>之后就可以将 $x_1,y_1$ 以最小偏移量去偏移，当 $x_1$ 变成最小正整数时，若 $y_1$ 也是正整数，则说明该方程有正整数解，而且此时 $y1$ 就是所有正整数解中的 $y$ 能取到的最大正整数，由此我们也可以求得正整数解的数量，即 $\lceil\dfrac{y_1}{y’}\rceil$，其中 $y’$ 是 $y$ 的最小偏移量。</p>
<p>同样地，我们也可以用同样的方法将 $y_1$ 变成最小正整数，剩下的部分就不再赘述了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a, b, c, x, y, g, dx, dy;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">exgcd</span> <span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span> &amp;x, <span class="type">long</span> <span class="type">long</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b) &#123;</span><br><span class="line">        x = <span class="number">1</span>;</span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> g = <span class="built_in">exgcd</span>(b, a % b, x, y), t;</span><br><span class="line">    t = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = t - (a / b) * y;</span><br><span class="line">    <span class="keyword">return</span> g;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">min_positive_x</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> num = x / dx;</span><br><span class="line">    x -= num * dx;</span><br><span class="line">    y += num * dy;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        x += dx;</span><br><span class="line">        y -= dy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">min_positive_y</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> num = y / dy;</span><br><span class="line">    y -= num * dy;</span><br><span class="line">    x += num * dx;</span><br><span class="line">    <span class="keyword">if</span> (y &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        y += dy;</span><br><span class="line">        x -= dx;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">    g = <span class="built_in">exgcd</span>(a, b, x, y);</span><br><span class="line">    <span class="keyword">if</span> (c % g) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    x *= c / g;</span><br><span class="line">    y *= c / g;</span><br><span class="line">    dx = b / g;</span><br><span class="line">    dy = a / g;</span><br><span class="line">    <span class="built_in">min_positive_x</span>();</span><br><span class="line">    <span class="keyword">if</span> (y &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld %lld &quot;</span>, (y + dy - <span class="number">1</span>) / dy, x);</span><br><span class="line">        <span class="built_in">min_positive_y</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld %lld &quot;</span>, y, x);</span><br><span class="line">        <span class="built_in">min_positive_x</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, y);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, x);</span><br><span class="line">        <span class="built_in">min_positive_y</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t --) <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="数论分块"><a href="#数论分块" class="headerlink" title="数论分块"></a>数论分块</h2><p>数论分块可以快速计算一些含有除法向下取整的和式（即形如 $\sum_{i=1}^n {f(i)g(\left\lfloor\dfrac {n}{i}\right\rfloor)}$ 的和式）。当我们可以在 $O(1)$ 的时间复杂度内计算 $f(r)-f(l)$ 时（例如预处理 $f(i)$ 的前缀和），数论分块就可以在 $O(\sqrt n)$ 的时间内计算上述式子。</p>
<p>数论分块的过程如下，首先我们只考虑最简单的情况，即 $g(i)=i$，那么有和式</p>
<script type="math/tex; mode=display">\sum_{i=1}^n {f(i)\left\lfloor\dfrac {n}{i}\right\rfloor}</script><p>不难发现 $\left\lfloor\dfrac {n}{i}\right\rfloor$ 的值会形成块状分布，即同样的值会集中在连续的区间内，举个例子：$\left\lfloor\dfrac {20}{7}\right\rfloor=\left\lfloor\dfrac {20}{8}\right\rfloor=\left\lfloor\dfrac {20}{9}\right\rfloor=\left\lfloor\dfrac {20}{10}\right\rfloor=2$。</p>
<p>那么我们具体该如何去寻找这些块的具体范围呢，问题转化为对于 $\left\lfloor\dfrac {n}{i}\right\rfloor$，我需要找到最大的整数 $r$ 满足 $\left\lfloor\dfrac {n}{i}\right\rfloor=\left\lfloor\dfrac {n}{r}\right\rfloor$，此时 $r$ 就是 $i$ 所在块的右端点。</p>
<p>这里我们直接给出结论 $r=\left\lfloor\dfrac {n}{\left\lfloor\frac {n}{i}\right\rfloor}\right\rfloor$，具体证明如下：我们令 $k=\left\lfloor\dfrac {n}{i}\right\rfloor$，即如果把 $n$ 按每段长度为 $i$ 去划分，最多可以划分 $k$ 段。同理，以长度 $r$ 去划分同样也是 $k$ 段，我们考虑将这 $k$ 段每次都减一，最终减的次数就是 $r$ 的值。不难算出减的次数为 $\left\lfloor\dfrac {n}{k}\right\rfloor=\left\lfloor\dfrac {n}{\left\lfloor\frac {n}{i}\right\rfloor}\right\rfloor$。</p>
<p>因此我们就可以枚举左端点 $l$，同时可以直接算出其右端点 $r$，因此把区间 $[l, r]$ 看作一块，因为其 $\left\lfloor\dfrac {n}{i}\right\rfloor(i\in[l,r])$ 都相同，所以我们此时只关心 $\sum_{i=l}^r {f(i)}$ 的值。然后我们直接把 $l$ 跳转到 $r$ 之后，从而加速计算。</p>
<p>最后我们就通过把 $n$ 个数分成若干块的方法优化了时间复杂度，那么为什么说可以优化到 $O(\sqrt n)$ 呢，因为可以证明块的数量不超过 $O(\sqrt n)$。块的数量其实就对应了 $\left\lfloor\dfrac {n}{i}\right\rfloor$ 的所有可能取值，下面我们证明 $\left\lfloor\dfrac {n}{i}\right\rfloor(1\leq i\leq n)$ 的取值数量是 $O(\sqrt n)$ ：</p>
<ul>
<li>当 $1\leq i&lt;\sqrt n$ 时，因为 $i$ 的数量是 $O(\sqrt n)$，所以取值数量自然也是 $O(\sqrt n)$ ；</li>
<li>当 $\sqrt n\leq i\leq n$ 时，由于 $\left\lfloor\dfrac {n}{i}\right\rfloor\leq\sqrt n$，其值域落在 $[1,\sqrt n]$，因此取值数量是 $O(\sqrt n)$。</li>
</ul>
<p>例题：<a href="https://www.luogu.com.cn/problem/U68454">服务器</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n, ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> l = <span class="number">1</span>; l &lt;= n; l ++) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> k = n / l, r = n / (n / l);</span><br><span class="line">        ans += (r - l + <span class="number">1</span>) * k;</span><br><span class="line">        l = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例题：<a href="https://www.luogu.com.cn/problem/P2261">[CQOI2007] 余数求和</a></p>
<p>这道题目首先需要对所求式子进行一些变换，首先由于 $k\bmod i=k-\left\lfloor\dfrac {k}{i}\right\rfloor\times i$，所以有</p>
<script type="math/tex; mode=display">
\begin{aligned}
&\sum_{i=1}^n {k\bmod i}\\
=&\sum_{i=1}^n {\left (k-\left\lfloor\dfrac {k}{i}\right\rfloor\times i\right )}\\
=&n\times k-\sum_{i=1}^n {\left (\left\lfloor\dfrac {k}{i}\right\rfloor\times i\right )}
\end{aligned}</script><p>此时右半部分就是一个标准的可以分块加速的式子了，不过其和上一题有一些微小区别，因为其整除式子中的分子是 $k$ 而不是 $n$，因此在计算块的右端点时可能会算出 $0$ 这样的数字，在代码实现上需要额外注意一下。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n, k, ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    ans = n * k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> l = <span class="number">1</span>; l &lt;= <span class="built_in">min</span>(n, k); l ++) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> r = <span class="built_in">min</span>(n, k / (k / l));</span><br><span class="line">        ans -= (l + r) * (r - l + <span class="number">1</span>) / <span class="number">2</span> * (k / l);</span><br><span class="line">        l = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="向上取整的数论分块"><a href="#向上取整的数论分块" class="headerlink" title="向上取整的数论分块"></a>向上取整的数论分块</h2><p>向上取整的数论分块与向下取整的数论分块，这里我们直接给出结论：满足 $\left\lceil\dfrac {n}{i}\right\rceil=\left\lceil\dfrac {n}{r}\right\rceil$ 的右端点 $r=\left\lfloor\dfrac {n-1}{\left\lfloor\frac {n-1}{i}\right\rfloor}\right\rfloor$。</p>
<p>结论的证明如下：因为 $\left\lceil\dfrac {n}{i}\right\rceil=\left\lfloor\dfrac {n-1}{i}\right\rfloor+1$，又由于我们想要找到 $r$ 满足 $\left\lceil\dfrac {n}{i}\right\rceil=\left\lceil\dfrac {n}{r}\right\rceil$，也就是满足 $\left\lfloor\dfrac {n-1}{i}\right\rfloor+1=\left\lfloor\dfrac {n-1}{r}\right\rfloor+1$，因此可以发现 $n$ 的上取整分块实际上和 $n-1$ 的下取整分块，因此直接套用 $n-1$ 下取整分块的结论即可。</p>
<h2 id="N-维数论分块"><a href="#N-维数论分块" class="headerlink" title="N 维数论分块"></a>N 维数论分块</h2><p>求含有 $\left\lfloor\dfrac {a_1}i\right\rfloor,\left\lfloor\dfrac {a_2}i\right\rfloor,\dots,\left\lfloor\dfrac {a_n}i\right\rfloor$ 的和式时，数论分块右端点的表达式从一维的 $\left\lfloor\dfrac {n}{\left\lfloor\frac {n}{i}\right\rfloor}\right\rfloor$ 变为 $\min\limits_{j=1}^n\{\left\lfloor\dfrac {a_j}{\left\lfloor\frac {a_j}{i}\right\rfloor}\right\rfloor\}$，即对于每一个块的右端点取最小（最接近左端点）的那个作为整体的右端点。</p>
<p>例题：<a href="https://codeforces.com/contest/1954/problem/E">Codeforces 1954E</a></p>
<p>题意：有一排 $n$ 个怪物，第 $i$ 个怪物的初始血量为 $a_i$，每次可以选择一个怪物执行攻击操作，攻击会持续传播到所有与其相邻的怪物上，直到没有相邻怪物或者相邻怪物已经死亡，则传播终止，所有被传播到的怪物都会扣除 $k$ 点血量，当怪物血量不大于零时认为怪物死亡。对于每一个 $k$，求出最小的操作次数让所有怪物都死亡。</p>
<p>对于某个 $k$，第 $i$ 个怪物显然最多被攻击 $\left\lceil\dfrac {a_i}{k}\right\rceil$ 次，我们不妨令 $b_i=\left\lceil\dfrac {a_i}{k}\right\rceil$，于是问题转化成，每次可以选择一段区间 $[l,r]$，满足区间内 $b_i(l\leq i\leq r)$ 都不是零，然后令这些 $b_i$ 减一，求最少操作次数把所有 $b_i$ 都变成零。</p>
<p>对于这个问题，其答案为 $\sum_{i=1}^{n} {\max(0,b_i-b_{i-1})}$，也就是 $\sum_{i=1}^{n} {\max(0,\left\lceil\dfrac {a_i}{k}\right\rceil-\left\lceil\dfrac {a_{i-1}}{k}\right\rceil)}$。我们可以这么考虑：</p>
<ul>
<li>当 $b_i&gt; b_{i-1}$ 时，$b_i-b_{i-1}$ 这部分不能同时将 $i,i-1$ 选中，所以我需要额外加上 $b_i-b_{i-1}$ 次操作；</li>
<li>当 $b_i\leq b_{i-1}$ 时，如果将 $i-1$ 选中了，$i$ 也必然能够选中，所以无需增加次数。</li>
</ul>
<p>但是问题还没完，题目需要我们对于每一个 $k$ 都求一遍这个式子，显然暴力枚举是不够的。我们令 $ans_k$ 表示当攻击力为 $k$ 时的答案，然后我们不妨考虑相邻两个怪兽对 $ans_k$ 的贡献，对于第 $i,i-1$ 个怪兽来说自然就是 $\max(0,\left\lceil\dfrac {a_i}{k}\right\rceil-\left\lceil\dfrac {a_{i-1}}{k}\right\rceil)$。</p>
<p>那么利用二维数论分块，我们就无需暴力枚举 $k$，只需要 $O(\sqrt k)$ 的时间复杂度就可以求出 第 $i,i-1$ 个怪物对整个 $ans$ 数组的贡献。具体来说，对于每个块，会在 $ans$ 数组上进行一个区间加操作，我们可以利用差分将这部分优化到均摊 $O(1)$。</p>
<p>那么最后枚举每一对相邻的怪物，把它们对于 $ans$ 数组的贡献都求出来，则答案也就得到了，总的时间复杂度为 $O(n\sqrt{a_i})$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n, a[N], maxn;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        maxn = <span class="built_in">max</span>(maxn, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">1</span>; l &lt;= maxn; l ++) &#123;</span><br><span class="line">            <span class="type">int</span> v1, v2, r1, r2, r;</span><br><span class="line">            v1 = (a[i] + l - <span class="number">1</span>) / l;</span><br><span class="line">            v2 = (a[i - <span class="number">1</span>] + l - <span class="number">1</span>) / l;</span><br><span class="line">            <span class="keyword">if</span> (l &lt; a[i]) r1 = (a[i] - <span class="number">1</span>) / ((a[i] - <span class="number">1</span>) / l);</span><br><span class="line">            <span class="keyword">else</span> r1 = maxn;</span><br><span class="line">            <span class="keyword">if</span> (l &lt; a[i - <span class="number">1</span>]) r2 = (a[i - <span class="number">1</span>] - <span class="number">1</span>) / ((a[i - <span class="number">1</span>] - <span class="number">1</span>) / l);</span><br><span class="line">            <span class="keyword">else</span> r2 = maxn;</span><br><span class="line">            r = <span class="built_in">min</span>(r1, r2);</span><br><span class="line">            ans[l] += <span class="built_in">max</span>(<span class="number">0</span>, v1 - v2);</span><br><span class="line">            ans[r + <span class="number">1</span>] -= <span class="built_in">max</span>(<span class="number">0</span>, v1 - v2);</span><br><span class="line">            l = r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= maxn; i ++) &#123;</span><br><span class="line">        ans[i] += ans[i - <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><p>快速幂是一个在 $O(\log n)$ 时间内求解 $a^n$ 的值的技巧。</p>
<p>首先我们需要知道如何快速计算 $a^{2^i}$，因为 $a^x\times a^y=a^{x+y}$，因此有 $a^{2^i}=a^{2^{i-1}}\times a^{2^{i-1}}$，即 $a^{2^i}=(a^{2^{i-1}})^2$。</p>
<p>又因为 $a^{2^0}=a^1=a$，因此我们可以由此来递推 $a^{2^i}$。接下来考虑 $a^n$，我们不妨将 $n$ 拆分成 $2^{k_1}+2^{k_2}+\dots+2^{k_s}$，并且在 $n$ 的二进制表示下，第 $k_i$ 位为 $1$。</p>
<p>这样我们就得到</p>
<script type="math/tex; mode=display">a^n= a^{2^{k_1}}\times a^{2^{k_2}}\times\dots\times a^{2^{k_s}}</script><p>显然 $k_s$ 是 $O(\log n)$ 级别的，因此根据上述递推 $a^{2^i}$ 的方法，我们就可以在 $O(\log n)$ 的时间内求解 $a^n$ 了。通常所求的结果非常大，题目一般都会对答案进行取模操作，我们只需要边乘边取模即可。</p>
<p>在代码实现上，快速幂有一个比较简洁的实现方式，具体我们看代码。</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/P1226">【模板】快速幂</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a, b, p;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">quickPower</span> <span class="params">(<span class="type">long</span> <span class="type">long</span> x, <span class="type">long</span> <span class="type">long</span> y, <span class="type">long</span> <span class="type">long</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) res = res * x % p;</span><br><span class="line">        x = x * x % p;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>, &amp;a, &amp;b, &amp;p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld^%lld mod %lld=%lld\n&quot;</span>, a, b, p, <span class="built_in">quickPower</span>(a, b, p));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="费马小定理"><a href="#费马小定理" class="headerlink" title="费马小定理"></a>费马小定理</h2><p>若 $p$ 为质数，且 $\gcd(a,p)=1$，则 $a^{p-1}\equiv 1\pmod p$，证明如下：</p>
<p>设一个质数为 $p$，我们取一个不为 $p$ 倍数的数 $a$。然后构造一个序列：$A=\{1,2,3\dots,p-1\}$，这个序列有着这样一个性质：</p>
<script type="math/tex; mode=display">
\prod_{i=1}^{p-1}\space A_i\equiv\prod_{i=1}^{p-1} (A_i\times a) \pmod p</script><p>因为 $\gcd(A_i,p)=1,\gcd(a,p)=1$，所以 $\gcd(A_i\times a,p)=1$。又因为 $A_i\times a \pmod p &lt; p$，所以 $A_i\times a \pmod p$ 是区间 $[1,p-1]$ 的整数。</p>
<p>同时每一个 $A_i\times a \pmod p$ 都是互不相同的，否则假设存在 $A_i\times a\equiv A_j\times a \pmod p$，则 $A_i=A_j$，这与我们构造的 $A$ 序列矛盾，所以假设不成立。</p>
<p>那既然 $A_i\times a \pmod p$ 落在区间 $[1,p-1]$ 内且互不相同，不难发现它们其实就是序列 $\{1,2,3\dots,p-1\}$ 的一个排列，所以不难得到该性质。</p>
<p>于是设 $f=(p-1)!$，则 $f\equiv a\times A_1\times a\times A_2\times a \times A_3 \dots \times  A_{p-1} \pmod p$，那么就有</p>
<script type="math/tex; mode=display">
\begin{aligned}
a^{p-1}\times f &\equiv f \pmod p \\
a^{p-1} &\equiv 1 \pmod p
\end{aligned}</script><h2 id="乘法逆元"><a href="#乘法逆元" class="headerlink" title="乘法逆元"></a>乘法逆元</h2><p>如果整数 $x$ 满足线性同余方程 $ax\equiv 1\pmod p$，则 $x$ 称为 $a\bmod p$ 的逆元，记作 $a^{-1}$。</p>
<p>不难发现其实我们可以用拓展欧几里得算法来求解逆元，即求出 $ax+py=1$ 的一组整数解 $x_0,y_0$，此时 $x_0$ 就是逆元，不难发现该方法的前提是 $a$ 与 $p$ 互质。</p>
<p>下面我们介绍一种更加常用的方法，快速幂法。因为 $ax \equiv 1 \pmod p$，如果 $p$ 是质数且 $\gcd(a,p)=1$，那么根据费马小定理我们可以得到 $ax \equiv a^{p-1} \pmod p$，于是有</p>
<script type="math/tex; mode=display">x \equiv a^{p-2} \pmod p</script><p>因为用到了费马小定理，所以该方法要求 $p$ 是质数且 $\gcd(a,p)=1$。</p>
<h2 id="线性求逆元"><a href="#线性求逆元" class="headerlink" title="线性求逆元"></a>线性求逆元</h2><p>如果想要求出 $1,2,\dots,n$ 中每个数在模质数 $p$ 意义下的逆元，假如通过枚举每个数，然后利用上述两种求逆元的方法进行计算，需要 $O(n\log n)$ 的时间复杂度，下面我们介绍一种 $O(n)$ 线性求逆元的方法。</p>
<p>首先，很显然的 $1^{-1} \equiv 1 \pmod p$。然后我们从 $2$ 到 $n$ 枚举 $i$，令 $k=\left\lfloor\dfrac{p}{i}\right\rfloor,j=p\bmod i$，显然有 $p=ki+j$。然后在 $\mod p$ 意义下，可以得到 $ki+j\equiv 0\pmod p$。</p>
<p>因为 $p$ 为质数，所以 $i,j$ 在模 $p$ 意义下的逆元一定存在，那么我们在上式两边同乘 $i^{-1}\times j^{-1}$，就可以得到 $kj^{-1}+i^{-1} \equiv 0 \pmod p$，即 $i^{-1}\equiv -kj^{-1}\pmod p$，代入 $k=\left\lfloor\dfrac{p}{i}\right\rfloor,j=p\bmod i$，则最终我们得到</p>
<script type="math/tex; mode=display">i^{-1}\equiv -\left\lfloor\dfrac{p}{i}\right\rfloor (p\bmod i)^{-1}\pmod p</script><p>显然 $p\bmod i&lt;i$，又因为我们是从小到大枚举 $i$，因此 $(p\bmod i)^{-1}$ 我们是已经计算出来了的，所以最终我们得到线性求逆元的式子</p>
<script type="math/tex; mode=display">
i^{-1}\equiv
\begin{cases}
1 & \text{ if } i=1\\
-\left\lfloor\dfrac{p}{i}\right\rfloor (p\bmod i)^{-1} & \text{ otherwise }
\end{cases}
\pmod p</script><p>例题：<a href="https://www.luogu.com.cn/problem/P3811">【模板】模意义下的乘法逆元</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3000010</span>;</span><br><span class="line"><span class="type">int</span> n, p, inv[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;p);</span><br><span class="line">    inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++)</span><br><span class="line">        inv[i] = <span class="number">1ll</span> * (p - p / i) * inv[p % i] % p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, inv[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>除此之外，我们还有另外一种线性求逆元的方法。我们令 $f_i=i!$，显然 $f_i$ 是很容易线性递推的，即 $f_i=f_{i-1}\times i$，注意初始化 $f_0=1$。</p>
<p>然后，我们可以利用快速幂法，先求出 $(f_n)^{-1}$，然后我们从 $n-1$ 到 $1$ 倒着枚举 $i$，因为 $(f_i)^{-1}=\dfrac{1}{i!}=\dfrac{i+1}{(i+1)!}=(i+1)\times (f_{i+1})^{-1}$，于是就可以通过 $(f_i)^{-1}=(i+1)\times (f_{i+1})^{-1}$ 递推出 $(f_i)^{-1}$。</p>
<p>最后，因为 $i^{-1}=\dfrac{1}{i}=\dfrac{(i-1)!}{i!}=f_{i-1}\times (f_i)^{-1}$，即 $i^{-1}=f_{i-1}\times (f_i)^{-1}$。</p>
<p>于是对于上一道题目，我们也可以用这个方法来解决。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3000010</span>;</span><br><span class="line"><span class="type">int</span> n, p, inv[N], fac[N], ifac[N];</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">quickPower</span> <span class="params">(<span class="type">long</span> <span class="type">long</span> x, <span class="type">long</span> <span class="type">long</span> y, <span class="type">long</span> <span class="type">long</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) res = res * x % p;</span><br><span class="line">        x = x * x % p;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;p);</span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        fac[i] = <span class="number">1ll</span> * i * fac[i - <span class="number">1</span>] % p;</span><br><span class="line">    ifac[n] = <span class="built_in">quickPower</span>(fac[n], p - <span class="number">2</span>, p);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i --)</span><br><span class="line">        ifac[i] = <span class="number">1ll</span> * (i + <span class="number">1</span>) * ifac[i + <span class="number">1</span>] % p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        inv[i] = <span class="number">1ll</span> * ifac[i] * fac[i - <span class="number">1</span>] % p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, inv[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>事实上，这个方法不仅可以线性求 $1,2,\dots,n$ 的乘法逆元，对于任意与质数 $p$ 互质的整数 $a_1,a_2,\dots,a_n$，都可以利用这个方法去线性递推。</p>
<p>例题：<a href="https://vjudge.net/problem/LibreOJ-161">乘法逆元 2</a></p>
<p>同理，我们令 $s_i$ 表示 前 $i$ 个数的乘积，就可以用同样的方式得到每个数的逆元。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5000010</span>, MOD = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">int</span> n, a[N], inv[N], s[N], is[N], b[N];</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">quickPower</span> <span class="params">(<span class="type">long</span> <span class="type">long</span> x, <span class="type">long</span> <span class="type">long</span> y, <span class="type">long</span> <span class="type">long</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) res = res * x % p;</span><br><span class="line">        x = x * x % p;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    b[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        b[i] = <span class="number">1ll</span> * b[i - <span class="number">1</span>] * <span class="number">998244353</span> % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    s[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        s[i] = <span class="number">1ll</span> * a[i] * s[i - <span class="number">1</span>] % MOD;</span><br><span class="line">    is[n] = <span class="built_in">quickPower</span>(s[n], MOD - <span class="number">2</span>, MOD);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i --)</span><br><span class="line">        is[i] = <span class="number">1ll</span> * a[i + <span class="number">1</span>] * is[i + <span class="number">1</span>] % MOD;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        inv[i] = <span class="number">1ll</span> * is[i] * s[i - <span class="number">1</span>] % MOD;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        ans = (ans + <span class="number">1ll</span> * inv[i] * b[n - i] % MOD) % MOD;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h2><p>欧拉函数，记作 $\varphi(n)$，表示的是小于等于 $n$ 且和 $n$ 互质的数的个数。显然当 $n$ 是质数的时候，有 $\varphi(n)=n-1$。</p>
<p>欧拉函数有几条比较常用的性质：</p>
<ol>
<li>欧拉函数是积性函数，即对满足 $\gcd(a,b)=1$ 的整数 $a,b$，有 $\varphi(ab)=\varphi(a)\varphi(b)$。</li>
<li><p>$n=\sum_{d\mid n}{\varphi(d)}$。证明如下：</p>
<p> 我们令 $f(x)$ 表示满足条件 $1\leq k\leq n$ 且 $\gcd(k, n)=x$ 的数的个数，那么有$n=\sum_{d\mid n} {f(d)}$。因为当 $d\nmid n$ 时，$f(d)=0$；其次对于任意整数 $i(1\leq i\leq n)$，一定有 $f(\gcd(i,n))$ 记下了这个数，也就是所有 $n$ 个整数都不重不漏地数了一遍。</p>
<p> 注意 $f(d)$ 的含义，其实它也可以等价地表示成 $\dfrac{n}{d}$ 以内和 $\dfrac{n}{d}$ 互质的数的个数，即 $\varphi(\dfrac{n}{d})$，从而有 $n=\sum_{d\mid n}\varphi(\dfrac{n}{d})$。</p>
<p> 因为 $d$ 和 $\dfrac{n}{d}$ 具有对称性，所以上式可以转化为 $n=\sum_{d\mid n}\varphi(d)$。</p>
</li>
<li><p>若 $n=p^k$，其中 $p$ 是质数，那么 $\varphi(n)=p^k-p^{k-1}$。证明如下：</p>
<p> 因为 $n=p^k$，所以 $n$ 以内和 $n$ 不互质的数只有 $p^{k-1}$ 个 $p$ 的倍数，于是根据定义就有上述性质。</p>
</li>
<li><p>设 $n=\prod_{i=1}^{s}p_i^{k_i}$，其中 $p_i$ 是质数，那么 $\varphi(n)=n\times \prod_{i=1}^s{\dfrac{p_i-1}{p_i}}$。</p>
<p> 因为欧拉函数的积性，我们可以得到</p>
<script type="math/tex; mode=display">
 \begin{aligned}
 \varphi(n)&=\prod_{i=1}^{s}\varphi(p_i^{k_i})\\
 &=\prod_{i=1}^{s}{p_i}^{k_i}-{p_i}^{k_i-1}\\
 &=\prod_{i=1}^{s} {p_i}^{k_i}\times(1-\frac{1}{p_i})\\
 &=n\times\prod_{i=1}^{s} (1-\frac{1}{p_i})
 \end{aligned}</script></li>
</ol>
<p>例题：<a href="https://www.luogu.com.cn/problem/U287953">欧拉函数</a></p>
<p>根据第四条性质，在质因数分解的同时去计算欧拉函数值即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="type">int</span> ans = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">while</span> (!(n % i)) n /= i;</span><br><span class="line">        ans = ans / i * (i - <span class="number">1</span>);;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n != <span class="number">1</span>) ans = ans / n * (n - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t --) <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="线性求欧拉函数"><a href="#线性求欧拉函数" class="headerlink" title="线性求欧拉函数"></a>线性求欧拉函数</h2><p>首先对于质数 $p$ 来说，其欧拉函数 $\varphi(p)=p-1$。</p>
<p>接着考虑合数 $n$，回顾线性筛质数的算法，每一个合数都是被其最小质因子筛掉。比如设 $p_1$ 是 $n$ 的最小质因子，令 $n’=\dfrac{n}{p_1}$，那么线性筛的过程中 $n$ 被 $n’\times p_1$ 筛掉。那么我们不妨就通过 $n’,p_1$ 来计算 $\varphi(n)$。</p>
<ul>
<li><p>如果 $n’\bmod p_1=0$，那么 $n’$ 包含了 $n$ 的所有质因子，根据第四条性质我们有</p>
<script type="math/tex; mode=display">
  \begin{aligned}
  \varphi(n)& =n\times\prod_{i=1}^s{\frac{p_i-1}{p_i}}\\
  &=p_1\times n'\times\prod_{i=1}^s{\frac{p_i-1}{p_i}}\\
  &=p_1\times\varphi(n')
  \end{aligned}</script></li>
<li><p>否则如果 $n’\bmod p_1\neq0$，这时 $n’$ 和 $p_1$ 是互质的，根据欧拉函数的积性，我们有</p>
<script type="math/tex; mode=display">
  \begin{aligned}
  \varphi(n)&=\varphi(p_1)\times\varphi(n')\\
  &=(p_1-1)\times\varphi(n')
  \end{aligned}</script></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> pri[N], cnt, phi[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sieve</span> <span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) pri[++ cnt] = i, phi[i] = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; pri[j] &lt;= n / i; j ++) &#123;</span><br><span class="line">            vis[i * pri[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (!(i % pri[j])) &#123;</span><br><span class="line">                phi[i * pri[j]] = pri[j] * phi[i];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                phi[i * pri[j]] = (pri[j] - <span class="number">1</span>) * phi[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例题：<a href="https://www.luogu.com.cn/problem/P2158">[SDOI2008] 仪仗队</a></p>
<p>不难发现，能够看到的人是根据从左下到右上这条直线对称的。那么我们不妨假设最左下角的坐标是 $(0,0)$，那么我们只需要考虑坐标为 $(i,j)$ 且 $j\leq i$ 的人，计算出这部分答案后再将答案乘二即可（不过对角线上有一个人，我们需要注意乘二后需要减去一个）。</p>
<p>然后可以发现只有当 $\gcd(i,j)=1$ 时，坐标 $(i,j)$ 才是可以被看见的，否则 $(i,j)$ 会被 $(\dfrac{i}{\gcd(i,j)},\dfrac{j}{\gcd(i,j)})$ 挡住。</p>
<p>那么对于第 $i$ 列的人来说，我此时想要知道有多少个 $j(0\leq j\leq i)$，满足 $\gcd(i,j)=1$，不难发现这就是欧拉函数的定义，即 $i$ 以内与 $i$ 互质的数的个数，不过注意到 $j$ 可以取到 $0$，所以当 $i=1$ 时需要特殊处理一下坐标 $(1,0)$ 的人。</p>
<p>那么最后我们只需要线性求 $n-1$ 以内的欧拉函数值，然后计算一下每一列欧拉函数的和即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">40010</span>;</span><br><span class="line"><span class="type">int</span> n, pri[N], cnt, phi[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sieve</span> <span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) pri[++ cnt] = i, phi[i] = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; pri[j] &lt;= n / i; j ++) &#123;</span><br><span class="line">            vis[i * pri[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (!(i % pri[j])) &#123;</span><br><span class="line">                phi[i * pri[j]] = pri[j] * phi[i];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                phi[i * pri[j]] = (pri[j] - <span class="number">1</span>) * phi[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">sieve</span>(n);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i ++)</span><br><span class="line">        ans += phi[i];</span><br><span class="line">    ans = ans * <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="欧拉反演"><a href="#欧拉反演" class="headerlink" title="欧拉反演"></a>欧拉反演</h2><p>欧拉函数还可以用于简化一列最大公约数的和，我们将其称为欧拉反演。</p>
<p>根据上述我们所讲的第二条性质，我们有</p>
<script type="math/tex; mode=display">n=\sum_{d\mid n}\varphi(d)</script><p>将 $n=\gcd(a,b)$ 代入上式，则有</p>
<script type="math/tex; mode=display">
\begin{aligned}
\gcd(a,b)&=\sum_{d\mid \gcd(a,b)}\varphi(d)\\
&=\sum_d [d\mid a][d\mid b]\varphi(d)
\end{aligned}</script><p>其中 $[P]$ 表示，当命题 $P$ 为真时，$[P]$ 的值为 $1$，否则为 $0$。</p>
<p>那么对于式子 $\sum_{i=1}^n\gcd(i,n)$，我们根据上述等式可以得到</p>
<script type="math/tex; mode=display">\sum_{i=1}^n\gcd(i,n)=\sum_{i=1}^n\sum_{d}[d\mid i][d\mid n]\varphi(d)</script><p>因为交换求和顺序不会影响结果，所以得到</p>
<script type="math/tex; mode=display">\sum_{d}\sum_{i=1}^n[d\mid i][d\mid n]\varphi(d)</script><p>观察到 $[d\mid n]\varphi(d)$ 与 $i$ 无关，所以可以提到前面得到</p>
<script type="math/tex; mode=display">\sum_{d}[d\mid n]\varphi(d)\sum_{i=1}^n[d\mid i]</script><p>不难看出 $\sum_{i=1}^n[d\mid i]$ 的意义是 $n$ 以内 $d$ 的倍数的个数，即 $\sum_{i=1}^n[d\mid i]=\left\lfloor\dfrac{n}{d}\right\rfloor$，将其代入上式得到</p>
<script type="math/tex; mode=display">\sum_{d}[d\mid n]\left\lfloor\dfrac{n}{d}\right\rfloor\varphi(d)=\sum_{d\mid n}\left\lfloor\dfrac{n}{d}\right\rfloor\varphi(d)</script><p>所以最终我们得到</p>
<script type="math/tex; mode=display">\sum_{i=1}^n\gcd(i,n)=\sum_{d\mid n}\left\lfloor\dfrac{n}{d}\right\rfloor\varphi(d)</script><p>因此就可以将需要枚举 $1,2,\dots,n$ 才能进行求和的式子优化到只需要枚举 $n$ 的约数即可。</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/P2303">[SDOI2012] Longge 的问题</a></p>
<p>题目即上述我们想要求和的式子，因此我们直接枚举 $n$ 的约数，然后对于每个约数 $d$ 求解其欧拉函数值，根据结论直接计算即可。</p>
<p>我们记 $n$ 的因子数量为 $d(n)$，实际上在数据范围内 $d(n)$ 的最大值并不会很大（可能就几千），算上求欧拉函数值的时间，总的时间复杂度为 $O(d(n)\sqrt n)$，并且实际上也跑不满。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">phi</span> <span class="params">(<span class="type">long</span> <span class="type">long</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> i = <span class="number">2</span>; i * i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">while</span> (!(n % i)) n /= i;</span><br><span class="line">        res = res / i * (i - <span class="number">1</span>);;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n != <span class="number">1</span>) res = res / n * (n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> i = <span class="number">1</span>; <span class="number">1ll</span> * i * i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i) <span class="keyword">continue</span>;</span><br><span class="line">        ans += <span class="number">1ll</span> * (n / i) * <span class="built_in">phi</span>(i);</span><br><span class="line">        <span class="keyword">if</span> (i == n / i) <span class="keyword">continue</span>;</span><br><span class="line">        ans += <span class="number">1ll</span> * i * <span class="built_in">phi</span>(n / i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例题：<a href="https://www.luogu.com.cn/problem/P2398">GCD SUM</a></p>
<p>推式子题，推导过程如下</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum_{i=1}^{n}\sum_{j=1}^{n}\gcd(i,j)&=\sum_{i=1}^{n}\sum_{j=1}^{n}\sum_{d}[d\mid i][d\mid j]\varphi(d)\\
&=\sum_{i=1}^{n}\sum_{d}\sum_{j=1}^{n}[d\mid i][d\mid j]\varphi(d)\\
&=\sum_{i=1}^{n}\sum_{d}[d\mid i]\varphi(d)\sum_{j=1}^{n}[d\mid j]\\
&=\sum_{i=1}^{n}\sum_{d}[d\mid i]\left\lfloor\dfrac{n}{d}\right\rfloor\varphi(d)\\
&=\sum_{d}\sum_{i=1}^{n}[d\mid i]\left\lfloor\dfrac{n}{d}\right\rfloor\varphi(d)\\
&=\sum_{d}\left\lfloor\dfrac{n}{d}\right\rfloor\varphi(d)\sum_{i=1}^{n}[d\mid i]\\
&=\sum_{d}\left\lfloor\dfrac{n}{d}\right\rfloor^2\varphi(d)
\end{aligned}</script><p>显然 $d$ 只需要枚举到 $n$ 即可，那么线性求 $n$ 以内的欧拉函数值，然后根据上述式子求和即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n, pri[N], cnt, phi[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sieve</span> <span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) pri[++ cnt] = i, phi[i] = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; pri[j] &lt;= n / i; j ++) &#123;</span><br><span class="line">            vis[i * pri[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (!(i % pri[j])) &#123;</span><br><span class="line">                phi[i * pri[j]] = pri[j] * phi[i];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                phi[i * pri[j]] = (pri[j] - <span class="number">1</span>) * phi[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">sieve</span>(n);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        ans += <span class="number">1ll</span> * (n / i) * (n / i) * phi[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="矩阵快速幂"><a href="#矩阵快速幂" class="headerlink" title="矩阵快速幂"></a>矩阵快速幂</h2><p>一个 $m\times n$ 的矩阵是一个由 $m$ 行 $n$ 列元素排列成的矩形阵列，即形如</p>
<script type="math/tex; mode=display">A = \begin{bmatrix} a_{1 1} & a_{1 2} & \cdots & a_{1 n} \\ a_{2 1} & a_{2 2} & \cdots & a_{2 n} \\ \vdots & \vdots & \ddots & \vdots \\ a_{m 1} & a_{m 2} & \cdots & a_{m n} \end{bmatrix}</script><p>矩阵的线性运算分为加减法与数乘，它们均为逐个元素进行，只有同型矩阵（行数和列数对应相同的矩阵）之间可以对应相加减。</p>
<p>矩阵相乘只有在第一个矩阵的列数和第二个矩阵的行数相同时才有意义，两个大小分别为 $m \times n$ 和 $n \times p$ 的矩阵 $A, B$ 相乘可以得到一个大小为 $m \times p$ 的矩阵，将结果矩阵记作 $C$，则</p>
<script type="math/tex; mode=display">c_{i j} = \sum_{k = 1}^{n} a_{i k} b_{k j} \text{\qquad($1 \le i \le m$, $1 \le j \le p$)}</script><p>在矩阵乘法中，结果 $C$ 矩阵的第 $i$ 行第 $j$ 列的数，就是由矩阵 $A$ 第 $i$ 行 $n$ 个数与矩阵 $B$ 第 $j$ 列 $n$ 个数分别 <strong>相乘再相加</strong> 得到的。</p>
<p>矩阵乘法满足结合律，不满足一般的交换律。</p>
<p>特殊地，定义 $A^0$ 为单位矩阵 $I = \begin{bmatrix} 1 &amp; 0 &amp; \cdots &amp; 0 \\ 0 &amp; 1 &amp; \cdots &amp; 0 \\ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ 0 &amp; 0 &amp; \cdots &amp; 1 \end{bmatrix}$。</p>
<p>根据上述矩阵定义，我们可以定义如下矩阵结构体。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> a[M][M];</span><br><span class="line">    <span class="built_in">Matrix</span>() &#123; <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a)); &#125;</span><br><span class="line">    <span class="function">Matrix <span class="title">I</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        Matrix res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i ++) res.a[i][i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span>* (<span class="type">const</span> Matrix &amp;b) <span class="type">const</span> &#123;</span><br><span class="line">        Matrix res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i ++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; M; k ++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; M; j ++)</span><br><span class="line">                    res.a[i][j] = (res.a[i][j] + a[i][k] * b.a[k][j]) % MOD;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>根据结合律，矩阵乘法可以利用快速幂的思想来优化，然后我们就可以计算形如 $A^n$ 的矩阵（通常 $A$ 是方阵，即行数和列数相等的矩阵）。由于进行一次矩阵乘法的时间复杂度是 $O(m^3)$，其中 $m$ 的方阵的行数（或列数），所以矩阵快速幂的时间复杂度为 $O(m^3\log n)$。</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/P3390">【模板】矩阵快速幂</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">100</span>, MOD = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> k;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> a[M][M];</span><br><span class="line">    <span class="built_in">Matrix</span>() &#123; <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a)); &#125;</span><br><span class="line">    <span class="function">Matrix <span class="title">I</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        Matrix res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i ++) res.a[i][i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span>* (<span class="type">const</span> Matrix &amp;b) <span class="type">const</span> &#123;</span><br><span class="line">        Matrix res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i ++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; M; k ++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; M; j ++)</span><br><span class="line">                    res.a[i][j] = (res.a[i][j] + a[i][k] * b.a[k][j]) % MOD;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Matrix <span class="title">quickPower</span> <span class="params">(Matrix x, <span class="type">long</span> <span class="type">long</span> y)</span> </span>&#123;</span><br><span class="line">    Matrix res = res.<span class="built_in">I</span>();</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) res = res * x;</span><br><span class="line">        x = x * x;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    Matrix A, ans;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j ++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;A.a[i][j]);</span><br><span class="line">    ans = <span class="built_in">quickPower</span>(A, k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j ++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans.a[i][j]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>矩阵快速幂还可以优化求解线性递推式，以斐波那契数列为例。在斐波那契数列当中，$F_1 = F_2 = 1, F_i = F_{i - 1} + F_{i - 2}(i \geq 3)$。</p>
<p>如果有一道题目让你求斐波那契数列第 $n$ 项的值，最简单的方法莫过于直接递推了。但是如果 $n$ 的范围达到了 $10^{18}$ 级别，递推就不行了，此时我们可以考虑矩阵加速递推。</p>
<p>根据斐波那契数列递推公式的矩阵形式</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
  F_{n-1} & F_{n-2}
\end{bmatrix} \begin{bmatrix}
  1 & 1 \\
  1 & 0
\end{bmatrix} = \begin{bmatrix}
  F_n & F_{n-1}
\end{bmatrix}</script><p>定义初始矩阵 $\text{ans} = \begin{bmatrix}F_2 &amp; F_1\end{bmatrix} = \begin{bmatrix}1 &amp; 1\end{bmatrix}, \text{base} = \begin{bmatrix} 1 &amp; 1 \\ 1 &amp; 0 \end{bmatrix}$。那么 $F_n$ 就等于 $\text{ans}\times \text{base}^{n-2}$ 这个矩阵的第一行第一列元素，也就是 $\begin{bmatrix}1 &amp; 1\end{bmatrix} \begin{bmatrix} 1 &amp; 1 \\ 1 &amp; 0 \end{bmatrix}^{n-2}$ 的第一行第一列元素。</p>
<p>然后利用矩阵乘法的结合律和矩阵快速幂，我们可以先计算出 $\text{base}^{n-2}$，最后再去计算 $\text{ans}\times \text{base}^{n-2}$。</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/P1939">矩阵加速（数列）</a></p>
<p>我们可以定义初始矩阵 $\text{ans} = \begin{bmatrix}a_3 &amp; a_2 &amp; a_1\end{bmatrix} = \begin{bmatrix}1 &amp; 1 &amp; 1\end{bmatrix}, \text{base} = \begin{bmatrix} 1 &amp; 1 &amp; 0 \\ 0 &amp; 0 &amp; 1 \\ 1 &amp; 0 &amp; 0 \end{bmatrix}$。那么 $a_n$ 就是 $\text{ans}\times \text{base}^{n-3}$ 这个矩阵的第一行第一列元素。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">3</span>, MOD = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> a[M][M];</span><br><span class="line">    <span class="built_in">Matrix</span>() &#123; <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a)); &#125;</span><br><span class="line">    <span class="function">Matrix <span class="title">I</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        Matrix res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i ++) res.a[i][i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span>* (<span class="type">const</span> Matrix &amp;b) <span class="type">const</span> &#123;</span><br><span class="line">        Matrix res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i ++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; M; k ++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; M; j ++)</span><br><span class="line">                    res.a[i][j] = (res.a[i][j] + a[i][k] * b.a[k][j]) % MOD;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Matrix <span class="title">quickPower</span> <span class="params">(Matrix x, <span class="type">long</span> <span class="type">long</span> y)</span> </span>&#123;</span><br><span class="line">    Matrix res = res.<span class="built_in">I</span>();</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) res = res * x;</span><br><span class="line">        x = x * x;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    Matrix ans, base;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">    ans.a[<span class="number">0</span>][<span class="number">0</span>] = ans.a[<span class="number">0</span>][<span class="number">1</span>] = ans.a[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    base.a[<span class="number">0</span>][<span class="number">0</span>] = base.a[<span class="number">0</span>][<span class="number">1</span>] = base.a[<span class="number">1</span>][<span class="number">2</span>] = base.a[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        base = <span class="built_in">quickPower</span>(base, n - <span class="number">3</span>);</span><br><span class="line">        ans = ans * base;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans.a[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t --) <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>教学</category>
      </categories>
      <tags>
        <tag>number theory</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/test/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
